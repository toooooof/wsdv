var S = {
	roads: [[303,173,133],[285,191,161,303,240,161],[328,238,188],[276,310,62],[303,323,202,281,381,202],[334,361,168],[184,388,42,117,466,42],[213,403,190],[234,442,52],[308,433,107],[313,497,217],[176,494,217],[114,528,91],[71,566,172],[120,567,41],[214,541,101],[146,657,125],[92,651,161],[246,586,41],[213,666,193],[242,687,66],[334,687,112,407,712,112],[332,723,136],[157,698,100],[214,747,169],[87,730,26],[104,788,110],[185,794,83],[186,844,136],[256,811,111],[222,844,176],[267,856,230],[348,795,247],[346,884,137],[253,923,145],[307,911,111],[335,952,82],[426,754,238],[455,787,182],[422,818,142],[394,855,178],[428,895,215],[502,260,307],[458,290,189,448,373,189],[575,314,301],[595,268,250],[592,368,211],[634,288,211],[651,360,306],[598,453,318],[498,417,260],[518,453,226,478,492,226],[634,397,263],[616,538,191],[656,554,335],[414,472,209,383,536,209],[443,477,173],[488,534,283],[404,552,240],[440,571,186],[571,564,298],[505,563,233,461,594,233],[570,605,241],[646,612,301],[484,627,277],[545,664,165],[397,600,117],[492,663,124]],
	factories: [[],[262,150],[321,202],[306,287],[218,338],[255,423],[335,445],[191,463],[52,526],[143,528],[70,613],[261,548],[208,623],[271,665],[193,708],[95,693],[56,773],[136,801],[208,800],[288,824],[218,891],[273,963],[446,734],[375,778],[444,858],[383,940],[455,234],[528,288],[604,335],[502,347],[552,407],[613,492],[426,430],[435,528],[521,537],[600,586],[520,627],[347,582],[424,625],[648,245],[680,386],[677,628],[545,713]],
	unrest: [[341,251],[348,341],[148,580],[270,598],[101,748],[268,778],[478,780],[534,97],[410,275],[561,455],[626,110],[396,392],[680,547],[356,638]],
	ls: [[349,262],[366,354],[228,515],[285,635],[124,770],[291,885],[489,794],[[527,54],[493,85],[499,139]],[399,282],[629,447],[624,132],[406,400],[536,597],[340,638]],
	socialists: [[422,310],[583,524],[593,64],[504,505],[630,567],[348,667]],
	massprotest: [[244,190],[212,311],[221,516],[243,650],[146,752],[283,878],[375,743],[495,111],[478,296],[494,402],[575,50],[457,477],[589,629],[399,588]]
}

var SVG = [
	"m 347.28312,326.01861 c -6.35513,-2.55357 -7.12248,-2.94994 -7.84456,-4.05199 -0.85952,-1.31179 -0.72816,-3.6382 0.2995,-5.30415 2.87419,-4.65944 3.12735,-6.10756 3.51877,-20.12838 l 0.2282,-8.17441 -2.42756,0 c -2.93153,0 -6.76044,1.05513 -15.91041,4.38442 -13.69583,4.98335 -13.08803,4.68872 -20.32672,9.85318 -1.77937,1.26948 -2.51105,1.58384 -3.68663,1.58384 -2.09624,0 -4.68723,-1.43812 -8.02145,-4.45223 -1.56941,-1.41874 -3.13031,-2.57953 -3.46868,-2.57953 -1.85193,0 -3.27125,-2.69601 -3.66316,-6.95815 -0.26388,-2.86975 -1.54554,-6.63975 -3.78421,-11.13119 -3.64761,-7.31817 -4.71684,-8.14028 -10.13399,-7.79172 -2.88757,0.18581 -3.60938,0.11394 -5.27869,-0.52557 -6.13414,-2.34998 -9.16932,-3.20441 -14.71707,-4.14301 -9.54593,-1.61502 -10.10035,-2.13435 -9.98481,-9.3526 0.10496,-6.55757 -0.22518,-8.14248 -2.44868,-11.75507 -1.66363,-2.70296 -1.85541,-3.21943 -1.85541,-4.99677 0,-1.68202 0.17584,-2.22708 1.16104,-3.59895 0.63858,-0.8892 2.00944,-3.4223 3.04635,-5.62909 1.03691,-2.20681 2.76901,-5.33231 3.84908,-6.94556 1.08007,-1.61324 1.96378,-3.11729 1.96378,-3.34233 0,-0.5101 -1.5508,-0.33255 -7.20755,0.8252 -2.32048,0.47492 -5.90533,0.95189 -7.96633,1.05993 -3.6831,0.19307 -3.7629,0.18083 -4.65854,-0.71481 -0.8159,-0.8159 -0.91047,-1.17965 -0.90383,-3.47624 0.009,-2.95611 1.00842,-6.20236 2.81609,-9.14293 3.43804,-5.59272 6.20353,-7.28789 13.04896,-7.99863 4.03476,-0.41892 5.65203,-0.94293 7.32212,-2.37247 3.35315,-2.87017 2.32654,-5.3579 -6.71662,-16.27598 -5.10592,-6.16456 -7.83768,-9.80516 -8.83781,-11.77818 -2.57293,-5.07576 -4.3136,-16.71662 -3.11795,-20.85149 0.55553,-1.92116 2.60111,-4.20622 4.53312,-5.06383 3.39892,-1.50878 10.73081,-2.19751 12.67745,-1.19086 1.15735,0.59848 4.24616,3.82131 5.17114,5.39548 0.82571,1.40526 2.44889,2.04528 6.4969,2.56177 4.55807,0.58157 6.92628,1.29319 10.19603,3.06376 5.5483,3.00441 6.35846,3.35832 8.06264,3.52207 2.66203,0.25579 3.90607,-0.37679 7.68073,-3.90552 3.8746,-3.6222 4.73424,-4.03379 9.06585,-4.34082 2.37999,-0.1687 3.09547,-0.0857 4.45778,0.51688 1.8465,0.8168 2.56566,1.91937 3.08842,4.73503 0.40903,2.20314 1.08316,2.84928 3.58822,3.43923 1.01861,0.23989 2.73742,0.89257 3.81957,1.45039 1.80839,0.93219 2.16711,0.99567 4.43501,0.7849 2.32449,-0.21605 2.59156,-0.1632 4.60867,0.9119 3.00821,1.60337 4.89535,3.31285 5.30835,4.80868 0.42925,1.55462 -0.12562,3.34314 -2.08077,6.70695 l -1.38201,2.37771 1.48232,0.0871 c 4.51601,0.26517 5.95019,0.99113 7.34003,3.71541 1.08399,2.12482 0.71209,3.90033 -2.32519,11.10055 -1.45946,3.45983 -2.65355,6.44931 -2.65355,6.64329 0,0.60607 1.03483,0.79764 5.98197,1.10733 4.94983,0.30985 4.97545,0.31711 8.77922,2.48867 0.92949,0.53066 1.87488,0.6994 3.91832,0.6994 3.3105,0 6.13299,0.82183 11.38122,3.3139 4.49122,2.13261 9.02961,4.89139 13.00874,7.90771 3.16408,2.39848 6.0203,3.54507 8.83098,3.54507 2.39365,0 3.51223,-0.925 5.69801,-4.71196 3.24221,-5.61727 6.84123,-8.12099 11.67367,-8.12099 3.32154,0 5.61407,1.05216 7.19494,3.30214 0.95001,1.35212 1.05439,1.76277 1.02292,4.02405 -0.0265,1.90052 -0.30677,3.2463 -1.14267,5.48615 -0.60918,1.63235 -1.1076,3.38258 -1.1076,3.88941 0,0.50684 0.47465,2.3257 1.05477,4.04191 1.35572,4.01073 1.34555,5.33299 -0.0613,7.97243 -1.1847,2.22273 -2.29773,3.30041 -8.55264,8.28094 -4.28738,3.41389 -6.43473,4.66037 -8.05819,4.67757 -1.6312,0.0173 -4.4417,1.09916 -5.92032,2.27895 -0.72353,0.57731 -1.31493,1.12876 -1.31421,1.22544 6.5e-4,0.0967 0.73003,0.47553 1.62071,0.84186 3.28209,1.34992 5.45073,4.5422 4.85291,7.14359 -0.12387,0.53902 -0.85513,2.04243 -1.62502,3.3409 l -1.3998,2.36086 1.08764,1.90099 c 1.20779,2.111 1.40816,4.06635 0.61054,5.95784 -0.2624,0.62225 -1.51532,2.43502 -2.78425,4.02836 -4.23521,5.31799 -4.15042,5.89852 1.99028,13.62762 1.53633,1.93372 3.16839,4.33339 3.62678,5.33257 2.4491,5.33844 1.68282,11.53104 -2.52633,20.41667 -1.71036,3.61059 -5.50699,9.57101 -6.95835,10.92407 -1.86251,1.73636 -10.2222,3.23493 -17.98314,3.22368 l -5.65181,-0.009 -5.11197,-2.05406 z",
	"m 322.17,526.50347 c -2.93872,-3.12813 -31.53899,-17.98758 -37.25724,-19.35723 -9.06206,-2.17058 -16.66219,-8.00802 -19.15795,-14.71467 -0.57848,-1.55447 -1.77677,-4.86177 -2.66288,-7.34956 -0.88612,-2.48778 -2.57627,-5.67518 -3.7559,-7.08308 -5.58595,-6.66696 -7.11486,-9.84033 -7.09824,-14.73287 0.0204,-5.9705 2.17769,-16.43374 4.19135,-20.32772 0.82897,-1.60307 1.22153,-2.91467 0.87235,-2.91467 -0.34919,0 -4.61504,1.27495 -9.47967,2.83324 -13.56368,4.34483 -16.19171,3.62885 -15.03333,-4.09573 0.70977,-4.73306 -0.10449,-5.80397 -5.12664,-6.74221 -2.67362,-0.49949 -3.94509,-0.15084 -6.61088,1.81283 -1.81532,1.33719 -4.46929,2.94559 -5.89771,3.57421 -3.09658,1.36272 -3.12874,1.6087 -0.73982,5.65762 1.02153,1.73135 2.50903,6.24603 3.30556,10.03261 0.79653,3.78658 1.87317,7.67867 2.39253,8.64912 3.51166,6.56158 -0.70069,10.11812 -20.16009,17.02144 -8.75058,3.10431 -17.28246,5.6442 -18.95972,5.6442 -6.72226,0 -9.57349,-8.23455 -4.63576,-13.38843 2.22155,-2.31878 2.38968,-2.91865 1.41662,-5.05426 -1.70966,-3.75229 -1.31248,-8.78949 1.0203,-12.94011 2.11499,-3.76312 2.11603,-3.78574 0.2361,-5.1195 -5.98392,-4.24542 -16.76846,-10.71826 -17.85791,-10.71826 -0.70006,0 -1.78355,1.23297 -2.40774,2.73995 -1.40128,3.38295 -3.62401,5.36628 -10.93785,9.75978 -11.509,6.91359 -21.01809,9.35367 -26.43474,6.78331 -2.45733,-1.16608 -3.89799,-2.94548 -6.0186,-7.43379 -1.53339,-3.24541 -4.15019,-7.04699 -5.81513,-8.44794 -3.4421,-2.89633 -9.623532,-6.23455 -11.544612,-6.23455 -1.9285,0 -5.39651,-4.08938 -5.39651,-6.36342 0,-1.29914 2.6837,-4.3981 7.716942,-8.91104 12.47925,-11.18918 14.33664,-13.28232 18.0397,-20.32927 3.80639,-7.24359 4.29368,-10.23306 2.13352,-13.08904 -2.43337,-3.21722 -1.62357,-7.31797 3.45633,-17.50251 2.69664,-5.4064 5.82426,-12.80472 6.95026,-16.44071 l 2.04726,-6.61087 -2.41897,-4.24985 c -1.33043,-2.33743 -4.45804,-6.96939 -6.95025,-10.29326 -4.0721,-5.43101 -4.53127,-6.54691 -4.53127,-11.01204 0,-4.38161 0.46151,-5.5644 3.90639,-10.01158 5.60728,-7.2387 12.19446,-13.93884 15.31986,-15.58254 2.23437,-1.17509 5.17047,-1.30459 17.05387,-0.75215 12.18076,0.56629 14.79472,0.43988 17.25938,-0.83465 2.34878,-1.2146 4.77796,-1.39334 12.69508,-0.93415 5.38478,0.31232 10.34081,1.0029 11.01337,1.5346 0.91053,0.71983 1.05639,2.65587 0.57114,7.58052 -0.61524,6.24367 -0.55155,6.57327 1.13818,5.88955 5.89868,-2.38679 13.19884,-2.24589 15.74869,0.30397 0.58155,0.58153 2.03481,1.05733 3.22948,1.05733 2.11573,0 2.17215,-0.23547 2.17215,-9.06528 0,-10.11709 0.91253,-12.90552 6.27272,-19.1677 3.19624,-3.73408 3.52588,-3.877 8.94178,-3.877 3.09277,0 7.20325,0.66225 9.13443,1.47167 2.85415,1.19629 5.64231,1.351 14.89971,0.8268 14.8339,-0.83997 16.95091,0.25633 26.66578,13.80895 1.6962,2.36627 6.27364,6.98486 10.1721,10.26355 9.05402,7.61464 10.24175,9.84807 9.40284,17.68155 -0.50151,4.68304 -0.36686,6.00351 0.61302,6.01145 0.69062,0.005 4.86805,1.70096 9.28317,3.76746 6.19047,2.89748 9.18079,3.75962 13.06723,3.76747 4.87993,0.01 5.19823,-0.15478 10.03804,-5.19184 l 4.99833,-5.20204 7.03482,3.34085 c 4.84238,2.29963 9.21946,3.59165 14.04445,4.14562 9.1583,1.05151 17.87553,4.65547 28.59354,11.82144 5.9798,3.99802 10.68681,6.35337 15.06545,7.53862 7.82529,2.1182 13.26646,5.66167 16.82116,10.95449 3.41411,5.0835 4.59882,9.34274 4.60547,16.55764 0.004,5.4797 -0.15386,5.85918 -4.00847,9.57095 -4.5226,4.35501 -6.91669,5.26513 -19.4549,7.39587 -19.79214,3.36347 -21.71171,6.58823 -16.61356,27.90961 1.81641,7.59655 3.48684,11.90426 6.72835,17.35112 l 4.31204,7.24573 -0.40526,13.47097 c -0.35065,11.65487 -0.67587,13.90818 -2.41235,16.71404 -3.24862,5.2492 -7.29627,8.53029 -15.5885,12.63632 -7.06187,3.49679 -7.91805,4.2183 -9.04603,7.62307 -0.69637,2.10202 -1.01104,5.4269 -0.71343,7.53837 0.29286,2.07771 0.79433,5.94179 1.11439,8.58687 l 0.58191,4.80922 -4.51245,3.69049 -4.51246,3.69047 -9.5222,0.0611 c -5.23721,0.0336 -13.34707,0.7757 -18.02191,1.64912 -11.06778,2.06785 -12.0192,2.02218 -14.57621,-0.69963 z",
	"m 61.483304,686.59446 c -0.788681,-0.54101 -2.393186,-0.99025 -3.565569,-0.99829 -5.215587,-0.0358 -9.457491,-2.88668 -13.597832,-9.13875 -2.303878,-3.47894 -4.780636,-6.17154 -5.676808,-6.17154 -0.874386,0 -2.545895,-0.66968 -3.714463,-1.48816 -2.344766,-1.64235 -2.845058,-5.89528 -1.081183,-9.1911 1.825679,-3.41133 0.239034,-8.05878 -3.505572,-10.26815 -1.848259,-1.0905 -3.892588,-3.24826 -4.54295,-4.79501 -0.650363,-1.54676 -2.351621,-3.73193 -3.780569,-4.85594 -3.392355,-2.66844 -3.327167,-5.65575 0.260217,-11.92584 2.842018,-4.96732 2.847466,-5.00561 0.955979,-6.71738 -1.062809,-0.96184 -1.90233,-2.94033 -1.90233,-4.48323 0,-1.91085 -1.472579,-4.53113 -4.779891,-8.50527 -5.432145,-6.5274 -6.126185,-10.04421 -2.628939,-13.32129 1.777096,-1.66521 2.870582,-1.90874 6.291273,-1.40102 3.39724,0.50422 4.727015,0.21588 7.409326,-1.60661 2.257036,-1.53356 3.059284,-2.66505 2.591523,-3.65512 -0.856231,-1.81232 -0.76396,-7.85371 0.201779,-13.21153 0.547623,-3.0381 1.593175,-4.80698 3.955445,-6.69184 l 3.211055,-2.56211 2.8e-5,-10.6377 c 2.9e-5,-11.29091 -0.377219,-12.31838 -4.747913,-12.93115 -2.958742,-0.41482 -4.337349,-3.21962 -5.801085,-11.80233 -0.627696,-3.68052 -1.952471,-8.57485 -2.943945,-10.87628 -0.991473,-2.30144 -1.802679,-4.9889 -1.802679,-5.97211 0,-2.75577 6.383096,-9.22174 9.851949,-9.97985 1.679566,-0.36708 4.001139,-1.68658 5.159059,-2.93223 3.151258,-3.38999 9.29159,-3.14943 13.766764,0.53939 2.912339,2.40061 4.078833,2.76228 8.104629,2.51291 2.586456,-0.16024 5.347933,-0.52837 6.136615,-0.81809 8.830025,-3.24355 11.894786,-3.77416 15.10171,-2.61452 2.709987,0.97994 3.44457,0.96088 4.121183,-0.107 1.52099,-2.40054 0.872828,-4.31986 -2.493276,-7.38294 -4.501118,-4.09593 -4.507218,-7.51653 -0.02046,-11.45597 1.829016,-1.6059 4.849744,-3.20577 6.712725,-3.55527 2.94207,-0.55193 3.65781,-1.2644 5.445936,-5.42102 1.202004,-2.7941 3.176815,-5.46554 4.745585,-6.41957 1.47779,-0.89869 3.98619,-3.42762 5.57424,-5.61986 2.42875,-3.35281 3.4127,-3.9859 6.19486,-3.9859 1.81913,0 4.78236,0.70332 6.58496,1.56292 4.49731,2.14461 7.23986,1.21849 13.13781,-4.43641 4.19876,-4.02574 5.55198,-4.77433 8.63033,-4.77433 3.52825,0 3.63198,-0.0942 3.08989,-2.80456 -0.43674,-2.1837 -0.0264,-3.33909 1.85352,-5.21901 4.80205,-4.80206 11.80759,-3.98874 14.68919,1.70536 2.48049,4.90154 4.14273,6.20215 8.79254,6.87974 11.51197,1.67759 17.93436,9.35636 12.42958,14.86113 -2.15215,2.15215 -2.58884,6.6043 -1.30832,13.33816 0.57847,3.04196 0.31953,3.70695 -2.30237,5.91314 -6.80233,5.72378 -1.00393,4.73124 11.28504,-1.93171 5.57604,-3.02329 10.81206,-5.77643 11.63557,-6.11808 0.82964,-0.34419 2.05187,-2.93297 2.74102,-5.8056 1.5128,-6.30611 0.55692,-8.65756 -6.06912,-14.92989 -4.36441,-4.13141 -5.35305,-7.02848 -3.78923,-11.10374 0.80311,-2.09288 5.3725,-4.34473 8.81619,-4.34473 1.57985,0 3.04711,-0.60971 3.34683,-1.39077 0.29354,-0.76492 2.31671,-2.30042 4.49597,-3.41218 3.35435,-1.71127 4.90384,-1.92058 10.099,-1.36423 7.10418,0.76079 10.22366,2.76219 12.0115,7.70636 1.41904,3.92432 1.68181,3.92357 13.07876,-0.0365 8.2703,-2.87366 10.48477,-2.55692 14.55799,2.08222 3.60175,4.10217 3.31766,7.39024 -1.1151,12.90619 -3.30863,4.11717 -6.61433,12.88876 -6.61433,17.55105 0,2.81849 0.45712,3.35372 4.32589,5.06507 3.60231,1.59347 4.72007,2.76025 6.68251,6.97557 1.31476,2.82412 2.36074,6.83427 2.36596,9.07074 0.006,2.70545 0.55566,4.4148 1.68982,5.25787 3.68773,2.74126 10.05609,11.54522 11.27078,15.58132 0.96963,3.22183 1.05691,5.70815 0.35367,10.07492 -0.51352,3.18862 -0.68982,6.19205 -0.39178,6.67429 0.29804,0.48225 0.70359,4.33183 0.90122,8.55466 0.31962,6.82911 0.0779,8.23075 -2.18662,12.67949 -1.67902,3.29849 -4.08227,6.09 -7.05763,8.19781 -7.60125,5.38494 -20.01455,5.90597 -22.11862,0.9284 -0.28251,-0.6683 -0.28027,0.52644 0.005,2.65496 0.39012,2.91124 0.12152,4.19959 -1.08415,5.20021 -2.10251,1.74492 -10.85593,2.8583 -13.80266,1.7556 -3.58646,-1.34209 -7.57145,-0.026 -9.14717,3.02122 l -1.39317,2.69412 3.72706,-0.4999 c 6.8773,-0.92244 10.83986,6.06117 7.33348,12.92451 -0.72535,1.41981 -1.63108,4.08713 -2.01272,5.9274 -0.38164,1.84025 -1.80451,4.52894 -3.16193,5.97485 -2.15959,2.3004 -3.18334,2.62894 -8.19169,2.62894 l -5.72365,0 2.07861,2.21257 c 3.26132,3.47152 2.64356,6.21594 -2.50154,11.11338 -2.51907,2.39781 -6.44781,6.83936 -8.73056,9.87011 -4.3912,5.83016 -7.67893,7.52237 -10.81264,5.56534 -1.48535,-0.92762 -2.2886,-0.86446 -4.10006,0.32246 -1.88007,1.23188 -2.16283,2.03048 -1.70905,4.82684 0.4819,2.96961 0.10757,3.78693 -3.29101,7.18552 -4.04401,4.04401 -5.9164,4.50338 -11.74994,2.88279 -4.57294,-1.27039 -9.83602,-6.79545 -9.83602,-10.32565 0,-2.03493 -0.73474,-3.15369 -2.87957,-4.38467 -2.6496,-1.52065 -2.94926,-1.52812 -3.75209,-0.0936 -0.4799,0.8575 -2.66145,2.39404 -4.84793,3.41453 -4.99043,2.3292 -10.07487,6.01669 -11.91151,8.63887 -1.18963,1.69843 -2.05389,1.92586 -5.51557,1.45138 l -4.1049,-0.56264 0.51689,3.18522 c 0.69861,4.30501 -1.74955,6.44971 -10.29478,9.0187 -6.24261,1.87674 -7.01727,1.91806 -10.94669,0.584 -3.88383,-1.31861 -4.47364,-1.29658 -7.2327,0.2699 -1.6522,0.93807 -4.34791,2.41124 -5.990455,3.27372 -1.642527,0.86247 -3.848946,3.22549 -4.903151,5.25115 -1.104528,2.12236 -3.214925,4.29599 -4.980378,5.12961 -2.354239,1.11161 -2.854588,1.77725 -2.160816,2.87465 3.003042,4.75014 -1.238145,10.61686 -7.59842,10.51068 -1.880371,-0.0314 -5.569958,0.18971 -8.198898,0.49136 -2.682465,0.30776 -5.409116,0.1168 -6.213859,-0.43522 z",
	"m 227.70744,796.63421 c -2.1378,-2.45081 -3.28452,-5.04505 -4.01232,-9.07713 -0.49343,-2.73376 -1.19983,-3.71744 -2.99264,-4.16741 -2.35309,-0.5906 -2.8054,-0.46456 -7.01281,1.95417 -2.67342,1.53687 -6.62492,0.51354 -9.25989,-2.39808 -0.92153,-1.01828 -2.91939,-1.85142 -4.43966,-1.85142 -3.76248,0 -6.60339,-3.16949 -8.82381,-9.8444 -1.36209,-4.09466 -1.60843,-6.20877 -0.94367,-8.09897 0.80391,-2.2859 5.25431,-6.12583 8.33148,-7.18862 0.79765,-0.27549 0.34453,-2.05807 -1.4803,-5.82339 -1.49216,-3.07894 -2.62982,-7.04025 -2.62982,-9.15702 0,-3.70806 -3.64657,-9.61517 -5.93564,-9.61517 -0.54126,0 -2.45449,1.291 -4.25161,2.86889 -2.57121,2.25755 -4.12648,2.85458 -7.29849,2.80168 -2.21706,-0.0369 -4.88177,-0.3996 -5.92159,-0.80587 -1.03981,-0.40626 -3.51985,-0.3726 -5.51118,0.0749 -4.57645,1.02826 -8.63076,-0.60206 -13.05478,-5.24958 -3.90723,-4.10463 -4.99998,-10.57658 -2.71085,-16.05526 1.44949,-3.46907 7.47397,-9.00407 12.66535,-11.6363 2.72466,-1.38155 12.8928,-12.16171 12.8928,-13.66888 0,-0.3853 -1.72134,-2.28967 -3.8252,-4.23195 -3.52017,-3.2498 -3.8252,-3.92819 -3.8252,-8.50728 0,-6.58941 1.89811,-10.02262 6.57602,-11.89434 2.07934,-0.83198 4.06634,-1.97504 4.41558,-2.54012 0.34925,-0.56509 0.63498,-4.42044 0.63498,-8.56746 0,-4.69716 0.47116,-8.18436 1.24962,-9.24898 0.91814,-1.25562 0.9867,-2.28599 0.25846,-3.88431 -0.8115,-1.78106 -0.53425,-2.82911 1.5295,-5.78191 4.53119,-6.48318 8.17992,-9.71572 11.71519,-10.37894 2.08996,-0.39207 3.82515,-0.22315 4.48494,0.43664 1.85125,1.85125 2.36442,1.20506 2.25825,-2.84367 -0.10377,-3.95742 1.30298,-5.8844 6.66531,-9.13028 1.45749,-0.88224 1.57775,-1.33978 0.61581,-2.34294 -2.1795,-2.27291 -1.39703,-6.26217 1.74723,-8.9079 2.96362,-2.49372 4.78291,-3.16622 9.86796,-3.6477 2.37922,-0.22528 2.94982,-0.86856 4.04976,-4.56558 1.7305,-5.81642 1.75843,-5.73779 -2.03768,-5.73779 -4.41775,0 -7.17225,-2.77274 -7.17225,-7.21974 0,-4.61534 2.05885,-8.24554 6.94903,-12.25266 7.13018,-5.84265 11.82911,-6.78248 15.50953,-3.10207 2.80409,2.8041 3.36153,2.34638 3.36153,-2.76016 0,-5.47871 3.31186,-8.61401 9.09909,-8.61401 3.21901,0 4.77435,0.58507 6.85613,2.57905 l 2.69262,2.57907 4.74843,-2.57907 c 3.8019,-2.06495 4.8755,-3.20639 5.38594,-5.72619 0.35065,-1.73093 1.38512,-3.97321 2.29883,-4.98285 1.84203,-2.03544 1.72715,-3.50277 -1.07017,-13.66691 -1.70656,-6.20081 -1.71203,-6.62818 -0.12041,-9.40142 0.91708,-1.59792 1.66742,-3.68343 1.66742,-4.63448 0,-5.49832 8.06243,-8.36104 13.88025,-4.92845 1.94968,1.15034 5.08679,2.03112 7.23437,2.03112 3.10021,0 4.55553,0.70389 7.97814,3.85873 2.30244,2.1223 6.86283,4.90769 10.13422,6.18973 3.2714,1.28206 7.38232,3.42502 9.13539,4.76214 2.92535,2.23129 3.54987,2.34993 7.59648,1.44306 2.42501,-0.54346 5.42435,-1.65334 6.66524,-2.46639 1.24089,-0.81305 4.54873,-1.708 7.35079,-1.98879 4.42554,-0.44345 5.58435,-0.17528 8.82329,2.04195 4.26873,2.92217 6.33537,2.73805 12.10203,-1.07814 2.63114,-1.74121 4.42237,-2.28748 6.11097,-1.86366 3.80395,0.95473 4.59551,3.59525 3.83057,12.77818 -0.59544,7.14807 -1.0054,8.5054 -3.17679,10.51778 -2.90672,2.69387 -8.53694,5.24531 -9.82206,4.45106 -0.4894,-0.30246 -2.54715,-0.26991 -4.57281,0.0723 -3.06723,0.5182 -5.50074,2.43325 -14.55533,11.45433 -8.84506,8.81232 -11.6543,11.04265 -15.06609,11.96136 l -4.19375,1.12926 5.63506,5.73677 c 3.09929,3.15522 6.81119,6.35692 8.2487,7.11486 1.43749,0.75795 3.31214,2.72886 4.16588,4.37979 1.43972,2.78411 1.43089,3.45883 -0.12179,9.30774 -2.2994,8.66184 -3.70598,11.14592 -10.06614,17.77734 -4.10424,4.27928 -5.6835,6.71655 -6.19926,9.56728 -0.38064,2.10386 -1.43999,5.33137 -2.35412,7.17225 -2.2925,4.61666 -4.77345,13.54514 -4.77345,17.17877 0,2.31983 1.13384,4.2169 4.90121,8.20033 3.7989,4.01679 5.08891,6.18708 5.73583,9.6499 1.78132,9.53492 -2.7284,17.0868 -10.84677,18.16374 -4.18117,0.55464 -4.79505,0.9559 -6.04713,3.95252 -0.76645,1.83436 -1.39354,4.34366 -1.39354,5.57621 0,2.2896 -4.11213,7.20073 -8.53226,10.1901 -1.37993,0.93325 -4.25439,1.66999 -6.52946,1.67352 -3.96058,0.006 -4.06427,0.0869 -4.06427,3.16756 0,3.12666 -3.15119,8.50003 -6.41815,10.94416 -2.48882,1.86197 -9.87539,1.45753 -13.47629,-0.73789 -2.94105,-1.79311 -3.26859,-1.81672 -4.74357,-0.34173 -2.06432,2.06431 -7.20061,4.1876 -10.12996,4.1876 -1.27336,0 -2.26628,0.53791 -2.20646,1.19537 0.0598,0.65746 -0.24498,3.04782 -0.6773,5.31193 -0.73358,3.84179 -0.51908,4.51198 3.2136,10.04114 3.87244,5.73619 3.98001,6.10229 3.38237,11.5125 -0.33952,3.07335 -1.0461,6.71577 -1.57019,8.09425 -0.53211,1.39956 -0.67639,5.08842 -0.32674,8.35353 0.61571,5.74935 0.57351,5.89153 -2.52173,8.496 -1.73135,1.45684 -4.14042,3.02614 -5.35349,3.48736 -1.59127,0.60499 -2.20558,1.59778 -2.20558,3.56443 0,4.68783 -3.40504,6.88446 -10.67177,6.88446 -4.75416,0 -6.59371,-0.39955 -7.70496,-1.67353 z",
	"m 166.3864,854.00562 c -1.05841,-0.62325 -3.36758,-2.22977 -5.13147,-3.57007 -4.63275,-3.52017 -8.55709,-4.56057 -17.20228,-4.56057 -9.13621,0 -14.73049,-2.40019 -20.22314,-8.67661 l -3.42948,-3.91883 -2.77895,1.63274 c -1.52842,0.898 -4.39632,1.63274 -6.37312,1.63274 -1.9768,0 -5.04304,0.41552 -6.81386,0.92339 -2.21772,0.63603 -4.11106,0.60105 -6.084139,-0.11243 -2.426966,-0.8776 -3.359306,-0.73417 -6.104142,0.93912 -4.081671,2.48823 -5.994209,2.49283 -8.466694,0.0204 -1.700833,-1.70083 -1.877925,-2.6309 -1.332356,-6.99747 0.346058,-2.76974 0.434907,-5.03591 0.19745,-5.03591 -0.237457,0 -2.261946,0.83048 -4.498868,1.84551 -2.236913,1.01503 -5.824478,1.85473 -7.972374,1.86599 -3.530306,0.0186 -4.411269,-0.49367 -9.175435,-5.33449 -6.439135,-6.54278 -7.007544,-7.50965 -5.989281,-10.18789 0.566589,-1.49024 0.256293,-3.34906 -1.053251,-6.30949 -1.10726,-2.50316 -1.629234,-5.1022 -1.293412,-6.44022 0.707519,-2.81901 -0.971519,-3.60452 -8.063313,-3.77225 -7.680738,-0.18168 -8.306377,-1.03428 -8.306377,-11.31977 0,-10.28753 1.514766,-14.69934 5.944219,-17.3128 2.716949,-1.60303 10.759708,-11.73877 9.814163,-12.36811 -1.326598,-0.88296 -10.059438,-3.44854 -11.725433,-3.44476 -2.038997,0.004 -5.89894,-3.93977 -5.89894,-6.02802 0,-0.61381 -1.085438,-1.69693 -2.412083,-2.40692 -3.090288,-1.65387 -5.051883,-5.47102 -5.051883,-9.83066 0,-1.88921 -0.804447,-4.74404 -1.787657,-6.34404 -2.774599,-4.5152 -3.380925,-9.46553 -1.509233,-12.32208 1.487251,-2.26983 1.482549,-2.51198 -0.08238,-4.24118 -1.592475,-1.75966 -1.587222,-1.9684 0.129947,-5.15698 1.794477,-3.33215 7.27092,-7.77925 9.579852,-7.77925 2.16315,0 7.325313,-4.07604 10.641777,-8.40274 2.829906,-3.69192 3.596232,-4.16282 6.415904,-3.9425 1.761178,0.13762 4.671612,0.3619 6.467629,0.49841 1.796016,0.1365 4.331498,0.57202 5.634389,0.96777 1.332411,0.40474 3.518308,0.28259 4.995856,-0.27917 2.192391,-0.83354 2.53035,-1.38363 2.043028,-3.32528 -1.135167,-4.52286 3.573849,-9.77439 8.764637,-9.77439 1.083524,0 1.871505,-0.76891 2.055343,-2.00563 0.435326,-2.92852 4.857586,-5.84437 8.698636,-5.73549 1.794077,0.0508 3.261949,-0.24142 3.261949,-0.64951 0,-0.4081 1.218063,-2.04592 2.706817,-3.63963 2.914588,-3.12008 6.577335,-3.80174 8.430375,-1.56897 0.95332,1.1487 1.54585,1.14356 4.3736,-0.0379 2.87194,-1.19997 3.60486,-1.20005 6.00899,-7.2e-4 l 2.7381,1.36594 0,-3.96434 c 0,-2.91458 0.55587,-4.47782 2.09924,-5.90353 2.31852,-2.14176 8.45599,-4.91704 10.87393,-4.91704 0.85213,0 4.3192,-1.47081 7.70459,-3.26846 l 6.15527,-3.26846 0.40769,-5.63632 c 0.32747,-4.52702 0.89194,-6.12056 2.86812,-8.09674 2.16272,-2.16271 2.74785,-2.32946 4.83572,-1.37818 1.3064,0.59523 2.37527,1.45421 2.37527,1.90882 0,0.45461 1.25552,2.24796 2.79003,3.98523 1.53452,1.73727 3.03227,3.8934 3.32836,4.79141 0.29608,0.89801 1.10751,1.63274 1.80317,1.63274 2.40634,0 6.7337,5.38418 7.33136,9.12181 0.51978,3.2505 0.97211,3.75387 4.258,4.73834 2.02637,0.60712 4.79295,2.42837 6.16403,4.05781 2.35501,2.79876 2.47055,3.39895 2.168,11.26212 -0.28468,7.39869 -0.56013,8.50053 -2.52217,10.08877 -1.21144,0.98063 -3.34245,1.78296 -4.7356,1.78296 -2.29899,0 -5.19664,2.2227 -6.95424,5.33438 -0.38264,0.67742 0.90369,2.53194 3.18709,4.59484 4.25466,3.84384 6.50687,7.56307 6.50687,10.74525 0,2.42195 -15.74523,18.20557 -19.59292,19.64071 -1.28287,0.47849 -3.72916,3.03483 -5.43621,5.68077 -3.01956,4.68033 -3.06443,4.89314 -1.65484,7.84909 1.33837,2.8066 1.64514,2.9637 4.02211,2.05998 1.84738,-0.70236 3.69561,-0.66409 6.55218,0.13569 l 3.97893,1.11404 3.62675,-4.08623 c 3.28506,-3.70127 4.01307,-4.07825 7.72752,-4.0016 2.25543,0.0466 5.33142,0.67634 6.83552,1.3995 3.23643,1.55606 7.00289,6.79607 7.00289,9.74265 0,1.14805 0.70427,4.26804 1.56506,6.9333 1.33377,4.12978 2.07338,5.04931 5.00477,6.22221 7.56562,3.02716 6.17675,10.59774 -3.22751,17.59285 l -5.00429,3.72231 3.39672,1.90467 c 4.83777,2.71269 5.87918,5.40314 4.7663,12.31349 -0.8402,5.21714 -0.7304,5.97209 1.41426,9.72367 2.84613,4.97868 2.90937,7.2989 0.37817,13.87701 -1.0832,2.81506 -2.09374,6.78317 -2.24563,8.81801 -0.29636,3.97022 -2.97351,7.02975 -6.15121,7.02975 -2.06944,0 -2.03936,-0.1393 -0.76141,3.52663 1.25218,3.59201 0.52803,5.03778 -6.87881,13.73379 -7.64487,8.97544 -11.74611,11.16459 -16.10622,8.59713 z",
	"m 138.3843,1025.4361 c -10.27061,-10.5441 -11.08857,-11.7536 -12.66176,-18.7197 -1.91662,-8.48716 -1.92251,-11.52903 -0.0347,-17.88608 1.14195,-3.84533 1.25468,-5.58808 0.47257,-7.30459 -1.64916,-3.61952 -1.21422,-5.76751 1.80825,-8.93025 3.38376,-3.54079 3.53433,-5.92326 0.73805,-11.67884 -2.39044,-4.92027 -1.95469,-6.36275 2.85119,-9.4381 1.89364,-1.21178 2.96703,-2.68257 2.99036,-4.09752 0.0216,-1.3046 1.3919,-3.40729 3.35105,-5.14178 2.30215,-2.03819 3.14737,-3.46157 2.76703,-4.65991 -0.30119,-0.94894 -0.0653,-3.18644 0.52395,-4.97223 0.78411,-2.37585 0.79195,-3.76934 0.0294,-5.19443 -1.46573,-2.73874 1.1589,-7.94707 5.29196,-10.50145 4.3857,-2.71052 5.38574,-4.83648 4.23518,-9.00351 -1.17153,-4.24295 0.0131,-7.59848 3.19443,-9.04797 1.86686,-0.85063 2.38179,-1.78103 2.38179,-4.30367 0,-4.51223 1.35386,-6.55111 5.19102,-7.81748 1.82341,-0.60177 3.31526,-1.43874 3.31526,-1.85992 0,-0.42118 1.4886,-2.92983 3.308,-5.57477 1.8194,-2.64496 3.308,-5.15431 3.308,-5.57634 0,-0.42205 1.22235,-2.23151 2.71631,-4.02104 2.21919,-2.65822 2.63098,-3.88976 2.25012,-6.7293 -0.38164,-2.84535 -0.0632,-3.79139 1.75664,-5.21691 4.82733,-3.78157 10.28953,-10.30677 10.28953,-12.29202 0,-1.1471 -0.42388,-3.20053 -0.94195,-4.56315 -1.23245,-3.2416 0.88693,-7.47638 4.73852,-9.46811 2.11071,-1.0915 2.81943,-2.12321 2.81943,-4.10441 0,-1.60078 0.93358,-3.52344 2.36285,-4.86619 3.28274,-3.08397 3.27143,-10.24337 -0.0246,-15.59487 -2.80378,-4.55221 -2.8969,-6.12338 -0.5405,-9.11906 0.98875,-1.25697 1.9457,-3.29189 2.12659,-4.52205 0.18087,-1.23017 1.49233,-3.10211 2.91436,-4.15985 l 2.58549,-1.92318 4.13404,2.06463 c 5.03355,2.5139 4.95032,2.51205 7.92223,0.17435 3.79124,-2.98217 6.67669,-2.41843 10.86997,2.12372 2.03815,2.20771 3.92136,5.09229 4.18495,6.4102 0.62959,3.14795 4.05476,7.74253 4.08484,5.47948 0.0318,-2.3981 4.41568,-7.10937 7.28544,-7.82963 1.39935,-0.35123 3.71175,-1.46988 5.13862,-2.48592 3.64616,-2.5963 10.10292,-4.72353 12.50629,-4.12033 1.55258,0.38966 2.82076,-0.44197 5.41522,-3.5512 3.2992,-3.95378 3.34248,-4.10764 1.65394,-5.87941 -2.23571,-2.34588 -2.19558,-4.8016 0.13186,-8.07019 2.74189,-3.85063 6.63404,-5.12236 13.66707,-4.46561 5.17455,0.48321 6.22309,0.30739 7.66427,-1.28509 2.27742,-2.51653 6.56109,-2.38631 8.41162,0.25571 0.8092,1.1553 1.4713,3.70719 1.4713,5.67085 0,3.25972 0.22609,3.57208 2.59914,3.59104 1.42953,0.0114 4.39173,0.83453 6.58266,1.82913 4.49822,2.04205 5.54478,4.41569 4.70559,10.67237 -0.42665,3.1809 -0.11568,4.38626 1.6831,6.52399 1.21354,1.44222 2.38164,3.14784 2.59578,3.79026 0.27382,0.82145 1.25547,0.55133 3.30802,-0.91023 6.39228,-4.5517 11.73158,-1.26707 11.45484,7.04679 -0.0665,1.99891 0.55949,5.33563 1.39119,7.41495 1.92606,4.81534 1.96266,9.16714 0.14308,17.01298 l -1.45205,6.26112 2.3972,2.84891 c 1.31846,1.5669 2.39718,3.69436 2.39718,4.7277 0,1.03332 1.24468,2.92611 2.76595,4.20618 1.52128,1.28005 3.04367,3.59183 3.3831,5.13726 0.50175,2.28449 1.10248,2.80988 3.21273,2.80988 4.68904,0 8.59596,5.89495 8.59596,12.97005 0,2.72201 0.76879,6.09594 1.89028,8.29568 2.21802,4.35053 2.41121,7.90518 0.56671,10.42768 -1.17241,1.60336 -1.06447,2.11801 0.94515,4.5063 1.24778,1.48291 2.26871,3.27784 2.26871,3.9887 0,2.95007 -4.35882,6.02162 -11.22355,7.90898 -3.83374,1.05404 -7.13184,2.07785 -7.32914,2.27513 -0.19729,0.1973 0.10572,1.69092 0.67331,3.31917 0.76957,2.20754 0.7342,3.86905 -0.13903,6.53299 -2.59783,7.92503 -6.74768,11.10608 -13.15251,10.0819 -3.76624,-0.60224 -3.79649,-0.58321 -3.35814,2.11232 0.24328,1.496 0.71095,7.30958 1.03928,12.91902 0.50736,8.66828 0.91645,10.58329 2.7258,12.75944 5.19069,6.24302 5.45482,9.45081 1.56513,19.0089 -1.50419,3.69618 -2.40652,6.92323 -2.00523,7.17126 0.4013,0.24802 1.43701,1.94161 2.30159,3.76354 1.29919,2.73789 1.39109,4.01137 0.52965,7.34007 -0.57325,2.21516 -1.87806,5.1951 -2.89956,6.62207 -1.74951,2.44385 -1.76651,2.73297 -0.29306,4.98179 1.92158,2.9327 2.19762,9.1314 0.49784,11.1794 -2.06875,2.4927 -6.74778,2.83 -11.46503,0.8261 l -4.25194,-1.8061 -3.308,3.7157 c -2.9884,3.3568 -3.97007,3.8197 -10.16031,4.7897 -3.80379,0.5962 -6.85229,1.5465 -6.85229,2.1359 0,1.7146 -3.28254,4.1904 -5.55592,4.1904 -3.53454,0 -7.44477,-2.6311 -10.49191,-7.06 -2.13794,-3.1073 -3.84963,-4.4767 -6.48276,-5.1857 -4.78018,-1.287 -13.55592,-7.5139 -15.09043,-10.7072 -1.77008,-3.6836 -2.70517,-3.1793 -3.2618,1.7591 -0.60103,5.3324 -3.7601,8.9014 -10.41183,11.7629 -7.16544,3.0824 -8.5215,2.5964 -19.82739,-7.1071 -2.06352,-1.7711 -2.12179,-5.0569 -0.13988,-7.8865 2.05593,-2.9353 1.37917,-3.25464 -3.35623,-1.5839 -2.215,0.7815 -5.06738,1.1599 -6.33861,0.8408 -2.27536,-0.571 -2.30167,-0.5073 -1.69043,4.1005 0.87755,6.6152 -1.74543,11.4695 -8.54956,15.822 -6.68923,4.279 -8.69482,4.7176 -13.69596,2.9946 -3.61058,-1.2441 -4.52684,-1.2512 -7.38387,-0.057 -4.25444,1.7776 -9.64013,1.7351 -12.25561,-0.098 -1.56208,-1.094 -2.54616,-1.2125 -3.92873,-0.4724 -2.57599,1.3786 -5.37119,1.2312 -8.63182,-0.4548 -2.63199,-1.3611 -2.7885,-1.3376 -2.7885,0.4189 0,2.6877 -3.59263,4.8036 -8.1562,4.8036 -3.21824,0 -4.51242,-0.5722 -6.94705,-3.0717 z",
	"m 341.58959,1056.2207 c -2.65715,-1.0706 -4.40265,-4.2972 -3.63427,-6.7182 0.51146,-1.6114 0.13945,-1.8749 -2.64712,-1.8749 -4.0881,0 -7.39749,-3.2829 -7.39749,-7.3382 0,-1.6033 -0.8739,-4.0261 -1.942,-5.3839 -1.56619,-1.991 -2.90057,-2.5245 -6.89543,-2.7566 -4.29584,-0.2495 -5.21159,-0.6719 -6.898,-3.182 -1.78757,-2.6605 -2.13733,-2.7966 -4.33214,-1.6862 -4.0222,2.0349 -9.33375,1.5433 -11.9864,-1.1093 -2.79041,-2.7904 -2.84449,-3.643 -0.54831,-8.6433 2.34919,-5.1158 5.17311,-7.4508 9.17927,-7.5898 2.04923,-0.072 3.82349,-0.8054 4.63785,-1.9191 1.08705,-1.4867 2.79242,-1.8533 9.69957,-2.0856 4.60935,-0.155 8.50719,-0.4084 8.66187,-0.563 0.15469,-0.1547 -0.19708,-2.0733 -0.78171,-4.2636 -0.97589,-3.65618 -0.85551,-4.28177 1.46963,-7.63695 2.52999,-3.65073 2.53102,-3.6599 1.00171,-8.87685 -1.48215,-5.05612 -1.45926,-5.42887 0.7194,-11.7117 2.00312,-5.77661 2.11111,-6.82963 0.98313,-9.58752 -0.69693,-1.70399 -1.70173,-4.81813 -2.23291,-6.92031 -0.53116,-2.10219 -1.77395,-6.11788 -2.76173,-8.92376 -1.13213,-3.21593 -1.79596,-7.69826 -1.79596,-12.12673 0,-3.86381 -0.42999,-7.29086 -0.95554,-7.61567 -2.80968,-1.73648 0.66968,-10.44553 5.1259,-12.83042 2.07324,-1.10957 7.31422,-1.10589 11.01731,0.008 0.85923,0.2584 1.64643,-0.75628 2.21683,-2.85743 0.72992,-2.68884 0.53887,-3.72556 -1.09348,-5.93343 -3.04482,-4.11834 -2.6206,-8.73082 1.09019,-11.85324 2.75675,-2.31965 3.57743,-2.52181 8.08624,-1.99189 4.445,0.52242 5.14048,0.36114 6.08951,-1.41212 0.79806,-1.4912 0.78341,-2.69714 -0.0574,-4.72707 -0.68305,-1.64901 -0.86794,-4.26917 -0.46822,-6.63512 0.36845,-2.18083 0.2517,-4.42357 -0.26398,-5.07135 -0.50852,-0.63875 -1.21831,-3.31133 -1.57732,-5.93906 -0.96266,-7.04622 -1.43126,-8.12208 -3.5377,-8.12208 -3.57903,0 -5.57449,-1.8551 -6.19945,-5.76339 -0.43354,-2.7113 -1.07393,-3.79189 -2.24719,-3.79189 -2.37141,0 -4.80367,-3.08156 -4.80367,-6.08604 0,-1.42516 -0.92768,-3.84594 -2.06151,-5.37953 -1.95609,-2.64575 -2.03071,-3.46554 -1.45917,-16.02977 0.5088,-11.18482 0.36835,-13.5755 -0.90424,-15.39238 -1.00234,-1.43103 -2.03309,-1.93271 -3.07964,-1.49888 -8.83938,3.66424 -15.06358,0.7148 -13.2364,-6.27228 0.36936,-1.41244 0.0202,-1.89574 -1.36931,-1.89574 -1.02578,0 -2.92049,-1.05544 -4.21047,-2.34541 -2.70331,-2.70331 -3.08733,-7.19847 -0.96288,-11.27101 l 1.37075,-2.62773 -3.62596,0 c -4.91456,0 -9.14456,-3.763 -8.24754,-7.337 0.58232,-2.32014 0.44481,-2.44215 -2.16431,-1.92033 -1.82974,0.36595 -3.97802,-0.0816 -6.25827,-1.30372 -4.94813,-2.65204 -5.93527,-2.30693 -3.08622,1.07898 5.1269,6.09297 2.93861,14.25976 -3.82092,14.25976 -2.24332,0 -3.29622,0.51773 -3.71106,1.82478 -0.91602,2.88614 -3.35199,4.36819 -7.5796,4.61146 -2.15284,0.12388 -5.6406,0.48189 -7.75059,0.79558 -3.25576,0.48405 -4.24406,0.1925 -6.53054,-1.92654 -2.6262,-2.43389 -2.68749,-2.7193 -2.42793,-11.30652 0.30542,-10.10537 -1.13577,-19.47761 -3.56531,-23.18557 -1.24963,-1.90718 -1.74046,-4.92839 -1.93033,-11.88184 -0.24165,-8.8495 -0.13399,-9.43769 2.11384,-11.54942 1.63241,-1.53358 3.42901,-2.19498 5.78123,-2.1283 2.16693,0.0614 4.06798,-0.55847 5.20758,-1.69806 2.95151,-2.95152 6.22925,-3.19343 13.61376,-1.00475 3.77446,1.1187 7.40015,2.03264 8.05708,2.03098 0.81972,-0.002 1.19442,-1.76492 1.19442,-5.61927 0,-6.86438 0.83014,-7.68553 8.80422,-8.70883 7.72278,-0.99105 11.24787,-2.39977 11.31849,-4.52317 0.39345,-11.83021 2.35206,-13.80775 17.85995,-18.0324 0.69416,-0.18911 1.19442,-1.87676 1.19442,-4.02943 0,-4.76226 2.26019,-6.86686 7.37454,-6.86686 6.11192,0 18.99281,9.08545 36.9715,26.07761 7.70301,7.28034 11.20131,7.22114 15.27219,-0.25839 3.85575,-7.0843 6.6756,-8.93711 12.52493,-8.22962 16.30545,1.97217 16.22535,1.97613 18.49846,-0.91366 1.15533,-1.46877 2.56036,-4.49637 3.1223,-6.72801 2.20147,-8.74285 10.51647,-11.29489 18.73855,-5.75124 3.13982,2.117 5.71418,2.90455 11.46646,3.50781 4.07969,0.42784 9.56758,1.44466 12.19531,2.25959 2.62773,0.81493 5.68718,1.48634 6.79879,1.49204 1.1116,0.006 3.11439,0.87032 4.45064,1.92141 1.33624,1.05109 3.56374,1.91108 4.94998,1.91108 1.43002,0 3.57849,1.05803 4.966,2.44555 2.46008,2.46007 2.59031,4.0425 0.79859,9.70419 -0.58956,1.86295 -0.0375,2.39624 4.60745,4.45044 6.50209,2.87553 7.67306,4.84898 6.83888,11.52558 -0.79235,6.3417 0.43626,8.89653 4.58393,9.53208 8.30773,1.27299 9.90919,1.67542 11.51616,2.89395 2.17157,1.64665 6.34271,13.26978 6.36485,17.73606 0.0186,3.76148 -3.07414,9.55538 -5.10069,9.55538 -0.73169,0 -1.84283,0.6175 -2.4692,1.37223 -1.55346,1.87182 0.32358,5.31654 2.897,5.31654 5.27732,0 10.77304,6.70377 9.09042,11.08864 -0.30697,0.79992 0.0422,2.61532 0.77594,4.03421 0.73373,1.41889 1.63586,4.59235 2.00473,7.05214 0.58836,3.92347 1.00699,4.54623 3.41104,5.07424 2.88852,0.63443 7.00059,4.80723 8.07588,8.19514 0.65702,2.07009 1.21548,2.09353 8.26887,0.34702 3.38337,-0.83778 12.46679,3.28585 14.68063,6.6646 0.9021,1.37678 1.92913,5.29494 2.2823,8.70703 0.39034,3.77122 1.26154,6.82323 2.22183,7.78351 1.46925,1.46926 1.84248,1.46121 5.33788,-0.115 2.29639,-1.03551 4.57665,-1.43493 5.8624,-1.02685 2.591,0.82236 5.70065,7.35748 5.72926,12.04042 0.0332,5.42538 2.65118,7.12341 10.56896,6.85494 6.20887,-0.21053 6.62678,-0.0847 8.97083,2.70105 1.35222,1.60701 2.45858,3.70793 2.45858,4.66869 0,1.45688 0.59477,1.67649 3.58327,1.32302 4.34353,-0.51374 10.62707,2.75798 12.40233,6.45767 0.98276,2.04807 0.86437,3.33133 -0.72426,7.85126 l -1.89902,5.40306 2.87423,3.96775 c 3.2073,4.42755 3.57698,7.82733 1.49122,13.71416 -0.74481,2.10219 -1.13335,4.74332 -0.86339,5.86921 1.04739,4.36825 -6.03943,12.76379 -10.77415,12.76379 -3.02807,0 -6.90964,-2.02784 -9.7959,-5.11765 l -2.27235,-2.43262 -2.28346,3.36486 -2.28346,3.36486 1.92808,2.70775 c 2.4516,3.44294 2.45804,6.89239 0.017,9.10149 -1.05109,0.95123 -1.91766,2.84534 -1.9257,4.20914 -0.0302,5.11349 -2.4332,6.32565 -14.31845,7.2227 l -9.07762,0.68514 -4.44732,4.9807 c -4.80485,5.3811 -9.42253,7.53454 -13.17774,6.1454 -3.31315,-1.22561 -5.98316,1.03332 -7.98113,6.75235 -1.94595,5.57013 -1.54448,7.04841 1.69349,6.23574 3.6209,-0.90879 6.39805,2.54671 5.67597,7.06239 -0.54809,3.42752 -0.36276,3.76868 3.49844,6.44015 10.38112,7.18248 12.39049,16.94978 4.35902,21.18855 -1.57184,0.8296 -1.43572,1.00781 1.16683,1.52839 4.12003,0.82396 10.51806,5.05556 11.75778,7.77646 1.49382,3.2786 0.18971,8.655 -2.97318,12.2573 -2.70545,3.0813 -2.71111,3.1147 -0.90841,5.3409 2.3969,2.96 2.29219,4.1802 -0.65976,7.6884 -2.13418,2.5363 -3.10797,2.9399 -7.09323,2.9399 -3.46332,0 -5.29545,-0.5668 -7.32048,-2.2649 -1.48558,-1.2457 -4.85101,-3.1959 -7.47874,-4.3336 -5.39648,-2.3367 -10.03316,-7.9075 -10.03316,-12.0546 0,-2.4625 -0.16515,-2.5512 -3.58327,-1.9261 -1.97079,0.3604 -5.44477,1.7363 -7.71993,3.0575 -4.58662,2.6636 -7.5599,2.4808 -10.69849,-0.6578 -1.03773,-1.0377 -1.88677,-2.9483 -1.88677,-4.2456 0,-1.7096 -0.39657,-2.2067 -1.44068,-1.8061 -0.79238,0.3041 -2.54709,-0.1721 -3.89936,-1.0581 -3.28087,-2.1497 -5.40337,-1.2915 -4.61125,1.8646 0.78642,3.1334 -1.43277,6.5188 -5.33182,8.1338 -2.57395,1.0662 -3.48568,1.0192 -6.30415,-0.3248 -3.28035,-1.5643 -3.3066,-1.5585 -5.9036,1.3183 -2.34939,2.6024 -3.44628,2.9834 -11.03891,3.8339 -8.5023,0.9526 -15.12186,0.1318 -16.46501,-2.0415 -0.33536,-0.5427 -1.42718,0.6655 -2.42625,2.6849 -2.02236,4.0875 -6.72958,7.3924 -9.49801,6.6685 -1.29117,-0.3377 -2.32182,0.3987 -3.60722,2.5773 -1.29106,2.1881 -2.98881,3.3958 -6.00816,4.2737 -2.31472,0.673 -6.0299,2.0863 -8.25595,3.1407 -2.49525,1.1819 -7.88872,2.3055 -14.06434,2.9301 l -10.01698,1.0131 -3.29664,-2.5144 c -1.82548,-1.3924 -3.80343,-4.0501 -4.43225,-5.9554 -0.97283,-2.9478 -2.01632,-3.836 -7.28078,-6.198 -3.43264,-1.5402 -8.76518,-3.0211 -12.08066,-3.3549 -3.2645,-0.3288 -6.95702,-1.2447 -8.20561,-2.0354 -3.05679,-1.9358 -3.90722,-0.4893 -3.92621,6.6778 -0.008,3.0388 -0.59797,6.9087 -1.31093,8.5998 -1.86622,4.4266 -8.83254,12.9029 -12.38429,15.0686 -3.35557,2.046 -3.9921,2.1273 -7.03991,0.8993 z",
	"m 493.61368,173.50335 c -8.38004,-1.92699 -8.39963,-1.94006 -11.19626,-7.48015 l -2.69891,-5.34653 2.21578,-4.62988 2.21579,-4.62989 -1.88752,-3.05405 c -1.81083,-2.92998 -1.8259,-3.16742 -0.37091,-5.8448 0.83413,-1.53492 3.96174,-5.40382 6.95026,-8.59757 8.79808,-9.40227 8.67964,-8.99876 4.01203,-13.66637 -3.83352,-3.83352 -4.00586,-4.23559 -4.34063,-10.12652 -0.31767,-5.58999 1.20283,-14.569639 3.26997,-19.311497 0.55923,-1.282831 0.22351,-1.563978 -1.87077,-1.566713 -5.19614,-0.0071 -10.8661,-5.253492 -9.68814,-8.964909 0.71912,-2.265772 2.5333,-3.160807 8.02385,-3.958645 3.4159,-0.496365 5.15318,-1.360562 7.41318,-3.687609 3.70438,-3.814279 7.3582,-4.06759 10.45611,-0.724896 3.04177,3.282125 4.36518,2.044909 3.71201,-3.470229 -0.91178,-7.698569 3.07038,-13.164823 8.18625,-11.237122 2.86992,1.081406 2.90571,1.054659 1.95054,-1.457616 -1.0685,-2.810371 0.32834,-6.151778 3.09952,-7.414412 1.18628,-0.540506 2.23028,-2.027192 2.55153,-3.633463 0.98895,-4.944713 8.99984,-7.086317 15.30868,-4.092567 3.03954,1.442349 4.94892,4.457843 4.94892,7.81584 0,1.805882 0.43386,1.968017 5.26634,1.968017 7.58637,0 8.47882,1.089635 9.87676,12.059063 0.62485,4.90318 0.92069,9.476211 0.65741,10.16229 -0.49696,1.295062 2.27952,4.248253 7.09325,7.544725 3.29977,2.259697 5.68109,6.841859 5.72527,11.016589 0.0175,1.645453 0.60618,3.996764 1.30837,5.225129 3.47305,6.075445 0.49096,11.613615 -6.25348,11.613615 -3.57748,0 -4.01859,0.22132 -4.00643,2.01006 0.026,3.80996 1.12214,4.38055 8.34348,4.34285 3.7555,-0.0196 7.60616,-0.45201 8.55701,-0.96089 2.53189,-1.35502 6.95067,-1.13045 10.45239,0.53124 3.59415,1.70554 5.01302,3.94395 4.62597,7.29791 -0.2207,1.91244 0.41208,2.92011 3.05259,4.86106 1.83205,1.34668 3.58613,3.46502 3.89796,4.70746 0.68949,2.74718 -1.03315,7.2106 -3.43115,8.89023 -1.67861,1.17575 -1.54928,1.38808 2.70908,4.4474 3.97252,2.85399 7.34012,7.53219 7.34012,10.1968 0,0.5168 -0.46302,1.95585 -1.02894,3.1979 -1.1122,2.44101 -3.24474,3.51015 -7.45794,3.73899 -1.47403,0.08 -4.2618,0.56581 -6.19501,1.07941 -4.14492,1.10118 -8.38137,-0.26756 -10.59059,-3.42165 -1.76021,-2.51305 -3.12694,-1.71858 -2.64871,1.53969 0.73017,4.97496 -5.10421,9.16408 -12.78269,9.17807 -1.90635,0.004 -3.53207,-0.83659 -5.36012,-2.76979 -2.58128,-2.72975 -2.73147,-2.76692 -9.25562,-2.29056 -4.90566,0.35818 -7.30302,0.13707 -9.21083,-0.84948 -2.34821,-1.21431 -3.05441,-1.16921 -7.88884,0.50384 -6.67203,2.30901 -7.82499,2.29715 -10.38384,-0.10676 l -2.06963,-1.94431 -11.83495,5.9773 c -11.7945,5.95689 -14.75307,6.71666 -20.76851,5.3334 z",

	"m 429.93807,353.01819 c -2.30816,-0.45294 -6.87632,-2.11591 -10.15147,-3.69549 -3.27515,-1.57957 -6.51606,-2.88134 -7.20203,-2.89281 -2.11889,-0.0355 -9.36699,-3.64828 -12.34293,-6.15237 -1.55575,-1.30907 -5.78508,-4.10679 -9.39849,-6.21714 -9.99984,-5.84023 -11.85234,-11.12431 -6.25056,-17.8292 1.74723,-2.09131 3.69599,-5.87194 4.33058,-8.40142 0.63457,-2.52947 1.55658,-6.14662 2.04888,-8.0381 1.07663,-4.13658 -0.6889,-9.97773 -4.32026,-14.29337 -3.41702,-4.0609 -3.06535,-7.4939 1.44863,-14.14103 l 3.83495,-5.64722 5.24722,0 5.24721,0 -0.54589,-4.03704 c -0.34957,-2.58511 -0.11428,-4.58238 0.65421,-5.55336 3.71372,-4.69228 14.76158,-6.22811 20.33871,-2.82738 1.64475,1.00291 3.7782,3.15701 4.74099,4.7869 1.33287,2.25634 2.31917,2.89698 4.13372,2.68495 1.86581,-0.21802 2.45164,-0.89712 2.69851,-3.12813 0.17343,-1.56733 1.93036,-4.99635 3.90431,-7.62005 2.84286,-3.77867 3.49828,-5.38825 3.15274,-7.74258 -0.61165,-4.16752 2.32984,-6.95981 7.3317,-6.95981 2.07919,0 5.504,-0.68967 7.61068,-1.5326 2.10671,-0.84293 4.61606,-1.32713 5.57637,-1.07601 0.96031,0.25112 2.77177,-0.33205 4.02547,-1.29594 2.77697,-2.13506 7.36013,-2.27724 11.92488,-0.36996 1.87557,0.78367 3.62672,1.42484 3.89144,1.42484 0.26471,0 0.20822,-2.05869 -0.12556,-4.57489 -0.52743,-3.97593 -0.32582,-4.83094 1.53993,-6.53054 3.60901,-3.28763 5.89969,-4.01721 12.07557,-3.84603 l 5.933,0.16444 6.39546,-6.85485 c 7.51025,-8.04973 8.86545,-8.35121 17.30927,-3.85071 l 5.63634,3.00415 2.5707,-2.06268 c 7.27454,-5.83699 10.71581,-4.2883 14.54056,6.54371 2.50795,7.10275 3.26786,8.00371 7.50287,8.89528 4.85582,1.02228 13.44803,7.33894 15.14819,11.13636 l 1.62964,3.63993 4.98712,-4.25692 c 8.31528,-7.0978 14.71435,-5.27956 17.75674,5.04541 0.87855,2.98154 3.07422,8.9853 4.87929,13.3417 2.96786,7.16275 3.18609,8.29829 2.28048,11.86615 -0.92056,3.6267 -0.8065,4.14891 1.41187,6.46439 3.43165,3.58189 9.61628,5.14375 15,3.78811 7.05118,-1.77551 9.88017,-1.38193 13.08211,1.82001 2.34865,2.34865 2.78231,3.4148 2.32305,5.71113 -0.38076,1.90383 0.0765,4.05368 1.40417,6.60074 1.80329,3.45968 1.86497,4.1826 0.7336,8.59701 -0.80078,3.12445 -0.91612,5.25572 -0.32793,6.05936 0.49902,0.68182 2.7605,3.51792 5.02551,6.30245 3.53241,4.34269 4.02594,5.47516 3.46972,7.96199 -0.35664,1.59454 -0.54609,3.54036 -0.42102,4.32402 0.12508,0.78365 0.2735,5.62989 0.32982,10.76939 0.0999,9.11716 0.0375,9.40032 -2.56275,11.63616 -1.46584,1.26039 -3.40113,2.29161 -4.30063,2.29161 -2.64475,0 -5.78144,-2.72812 -7.29118,-6.34144 -1.10007,-2.63283 -1.76857,-3.21228 -3.07335,-2.66399 -5.51107,2.31587 -10.42543,-0.24114 -11.02726,-5.73761 -0.1728,-1.57818 -0.82415,-3.82229 -1.44744,-4.98693 -0.79354,-1.48275 -0.84372,-2.65856 -0.16735,-3.92235 1.08779,-2.03256 -0.4859,-3.17359 -4.69864,-3.40679 -1.30609,-0.0723 -3.82033,-0.21162 -5.58718,-0.30959 -2.32665,-0.12902 -4.10758,-1.12724 -6.45868,-3.62014 -3.09358,-3.28014 -3.3096,-3.35831 -4.59393,-1.66231 -0.74124,0.97884 -1.36129,2.101 -1.37792,2.49369 -0.0167,0.39271 -2.14718,2.2349 -4.73459,4.09376 -4.27459,3.07099 -4.62171,3.59718 -3.79956,5.7596 2.17387,5.71771 1.31406,7.35083 -7.65183,14.53405 -3.86338,3.09523 -4.18225,3.18425 -6.53888,1.82554 -2.3422,-1.35038 -2.76267,-1.24884 -7.70185,1.85983 -2.87341,1.8085 -6.62849,4.51348 -8.34459,6.01105 -3.66374,3.19719 -4.67426,3.26708 -11.60311,0.8026 -2.87342,-1.02202 -7.7891,-2.13697 -10.92374,-2.47766 -3.26686,-0.35505 -7.35662,-1.57578 -9.58236,-2.8602 -2.44151,-1.40893 -5.4056,-2.24079 -7.98441,-2.24079 -2.91131,0 -5.0048,-0.68905 -7.21482,-2.37472 -1.98808,-1.51639 -4.34904,-2.37473 -6.53193,-2.37473 -4.40292,0 -9.56626,-2.17016 -11.13326,-4.67932 -1.64647,-2.63641 -5.30921,-2.49752 -7.49741,0.28432 -2.8149,3.57858 -8.1124,5.65269 -12.79742,5.01053 -3.17982,-0.43584 -4.56442,-0.14756 -6.46258,1.34554 -1.32864,1.04511 -4.68163,2.90502 -7.45106,4.13312 -2.76944,1.2281 -5.88924,3.18151 -6.93289,4.3409 -4.09892,4.55351 -7.94209,5.42015 -16.54747,3.73148 z",
	"m 562.67887,563.96102 c -1.23268,-0.90136 -1.72612,-2.758 -1.88309,-7.08529 -0.16528,-4.55623 -0.68156,-6.36293 -2.31517,-8.10183 -1.15636,-1.23088 -2.10246,-3.42764 -2.10246,-4.88169 0,-1.71316 -1.00264,-3.58032 -2.8485,-5.30461 -4.15067,-3.87731 -3.80683,-7.0615 1.42425,-13.18987 2.35001,-2.7531 4.27857,-5.93211 4.2857,-7.06447 0.008,-1.13237 0.24229,-2.91339 0.52258,-3.95784 0.42372,-1.5789 -0.28605,-2.18118 -4.21073,-3.57304 -2.59619,-0.92071 -6.50704,-3.16677 -8.69077,-4.99123 -2.18373,-1.82446 -5.10156,-3.56768 -6.48408,-3.87382 -5.01438,-1.11039 -5.89419,-1.50044 -8.68886,-3.85199 -3.59813,-3.02763 -13.82392,-5.33241 -18.15177,-4.09119 -4.64175,1.33124 -10.73736,-0.58938 -14.12844,-4.45162 -1.56624,-1.78385 -2.84771,-3.84061 -2.84771,-4.57058 0,-0.72998 -0.85924,-1.59993 -1.90941,-1.93325 -1.98349,-0.62953 -4.73707,-5.00228 -4.73707,-7.52257 0,-0.79665 -0.85296,-2.84742 -1.89545,-4.55726 -2.58094,-4.23314 -2.40305,-5.79593 1.11595,-9.80385 2.21969,-2.52809 3.20033,-4.7779 3.70565,-8.50158 0.37794,-2.78504 0.97087,-6.35544 1.31762,-7.93422 0.59388,-2.70387 0.43355,-2.90746 -2.7615,-3.50685 -2.10735,-0.39534 -4.32774,-1.74842 -5.86276,-3.5727 -2.10136,-2.49732 -2.38739,-3.54478 -1.91303,-7.00561 0.30677,-2.23809 1.69002,-5.78023 3.0739,-7.87142 2.38954,-3.61082 2.48206,-4.19313 1.83847,-11.57104 -0.54284,-6.22297 -1.16136,-8.403 -3.10836,-10.95566 -2.3925,-3.13672 -2.51701,-3.177 -7.92728,-2.56489 -4.55713,0.51557 -6.23331,0.26523 -9.80686,-1.4647 -2.37064,-1.14761 -4.7745,-1.79965 -5.3419,-1.44897 -0.5674,0.35067 -4.09702,0.32974 -7.84358,-0.0465 -6.41967,-0.6447 -7.04778,-0.92331 -10.90729,-4.83822 -2.25245,-2.28474 -4.43415,-4.15409 -4.84823,-4.15409 -1.52193,0 -2.79344,-4.61741 -2.29495,-8.33397 0.40633,-3.02942 -0.12401,-5.17184 -2.55274,-10.31225 -2.35881,-4.99242 -2.87733,-7.02345 -2.24894,-8.80895 0.93469,-2.65582 8.95245,-7.76324 15.90893,-10.1342 2.55627,-0.87125 6.12037,-2.58342 7.92023,-3.80483 1.79985,-1.22143 6.83937,-3.30873 11.19893,-4.63849 4.35956,-1.32974 9.18898,-3.48004 10.73204,-4.77844 3.69166,-3.10633 5.33684,-2.98976 13.58386,0.96252 4.81702,2.30849 8.26553,3.32324 11.2937,3.32324 3.60629,0 4.83167,0.49309 7.09428,2.85475 1.83529,1.91564 3.04944,2.54034 3.69078,1.89899 1.87772,-1.87771 5.50283,-0.96454 8.37446,2.10954 2.76585,2.96086 3.08731,3.05495 9.43535,2.76169 4.52031,-0.20883 7.2282,0.11905 8.67413,1.05027 1.1562,0.74463 3.47126,1.82283 5.14456,2.39599 2.6654,0.91299 3.11266,0.82066 3.60964,-0.74518 0.57007,-1.79615 5.97016,-5.67957 7.89772,-5.67957 0.56796,0 2.6067,-1.06818 4.53055,-2.37374 1.98513,-1.34715 4.85455,-2.37375 6.6348,-2.37375 4.25034,0 6.65518,-3.1492 4.62177,-6.05232 -0.75746,-1.0814 -1.37718,-2.77127 -1.37718,-3.75524 0,-1.922 8.78827,-10.72911 11.5951,-11.61997 0.93383,-0.29638 1.69786,-1.30318 1.69786,-2.23735 0,-2.72322 6.30019,-10.21053 9.54281,-11.34092 5.568,-1.94101 11.34613,3.52913 11.34613,10.74136 0,2.12823 0.37997,2.37759 3.56061,2.33667 1.95834,-0.0252 7.1272,0.31479 11.48636,0.75555 6.10925,0.6177 8.23097,1.21881 9.2576,2.6228 2.00645,2.744 1.62702,4.85422 -1.51664,8.43464 -3.95282,4.50201 -3.83546,6.7133 0.31497,5.93467 4.28776,-0.8044 9.52208,2.61523 9.97133,6.51434 0.17412,1.5112 1.29412,4.06105 2.48891,5.66631 4.41853,5.93658 3.59293,14.45306 -1.73983,17.94721 -1.29504,0.84856 -3.7111,4.08781 -5.369,7.19834 -1.65789,3.11054 -3.57413,5.87033 -4.25829,6.13287 -1.00422,0.38535 -1.02441,1.22083 -0.10476,4.33549 1.17636,3.9841 4.10702,6.16309 11.62716,8.64495 4.00051,1.3203 8.50249,6.46005 9.98104,11.39503 1.24445,4.15359 3.43436,6.11028 10.59748,9.46883 8.10275,3.79912 9.15887,9.76313 3.02826,17.10099 -3.86332,4.62409 -4.6798,6.90387 -3.35746,9.37469 0.55115,1.02983 1.0021,3.18234 1.0021,4.78335 0,2.61751 0.29445,2.91091 2.92152,2.91091 1.95524,0 3.82885,0.90732 5.66472,2.74319 2.5235,2.5235 2.7014,3.15084 2.2213,7.83335 -0.28704,2.79959 -0.92688,6.3675 -1.42187,7.92869 -0.66889,2.1097 -0.58755,2.94122 0.31679,3.23846 0.66922,0.21997 2.65315,1.83176 4.40876,3.58176 3.00769,2.99812 3.15304,3.44159 2.5174,7.68076 -0.37103,2.47441 -1.0597,5.21857 -1.53038,6.09813 -0.47068,0.87956 -0.85579,2.77891 -0.85579,4.22078 0,1.55647 -1.04485,3.71218 -2.5717,5.30586 -1.41443,1.47635 -3.05615,4.59222 -3.64824,6.92416 -0.96324,3.79359 -0.88163,4.41602 0.77533,5.91316 1.01853,0.9203 2.87502,3.596 4.12553,5.946 1.2505,2.35001 3.1992,5.43265 4.33045,6.85031 1.89119,2.37003 1.9599,2.90521 0.85331,6.64649 -1.64905,5.57526 -3.21991,7.05203 -8.92803,8.39318 -2.6985,0.63404 -6.08383,1.7486 -7.52295,2.47683 -1.43913,0.72823 -4.28662,1.46564 -6.32778,1.63869 -2.04115,0.17305 -4.87359,1.22899 -6.29431,2.34653 -3.30894,2.60282 -7.76289,2.60822 -10.52562,0.0127 -2.90394,-2.72811 -4.44583,-1.87414 -6.47802,3.58781 -3.04407,8.18158 -4.99425,10.52355 -11.38147,13.66797 -5.15965,2.54008 -6.46256,2.82739 -9.2862,2.04775 -1.93364,-0.5339 -5.34737,-0.58079 -8.30032,-0.11399 -3.5351,0.55883 -6.73289,0.38797 -10.83216,-0.57875 -3.19897,-0.75441 -7.15277,-1.37797 -8.78623,-1.38569 -1.63345,-0.008 -4.45889,-0.63617 -6.27877,-1.39657 -3.16889,-1.32404 -3.46501,-1.26886 -6.99981,1.30447 -4.77582,3.47678 -7.19502,4.17272 -9.25894,2.66355 z",
	"m 648.62357,180.06616 c -0.91673,-0.67033 -2.18717,-3.2683 -2.8232,-5.77326 -0.99388,-3.91426 -1.53724,-4.63236 -3.86551,-5.10853 -1.48998,-0.30474 -4.71791,-1.73133 -7.17316,-3.1702 l -4.46411,-2.61614 -5.1171,1.61304 c -3.15074,0.99318 -6.30529,1.39012 -8.20911,1.03296 -5.10866,-0.95839 -8.41944,-6.83361 -6.00306,-10.6529 0.62006,-0.98006 0.0925,-1.89599 -1.96756,-3.41582 -3.60006,-2.65605 -10.64969,-10.89591 -11.43271,-13.36296 -0.3533,-1.11315 0.0124,-2.83128 0.88677,-4.16567 1.36818,-2.08809 1.36614,-2.45724 -0.0253,-4.58083 -0.89891,-1.37191 -1.29155,-3.19363 -0.96702,-4.48663 0.52582,-2.09507 0.25978,-2.21667 -7.07896,-3.23546 -4.19391,-0.5822 -9.84917,-1.21564 -12.56723,-1.40763 -6.0741,-0.42905 -7.49952,-1.76887 -10.80963,-10.16043 -3.53719,-8.96727 -1.96912,-13.48289 5.02033,-14.457218 l 3.89732,-0.543292 -3.25188,-6.486145 c -2.45483,-4.896371 -4.07442,-6.927784 -6.60781,-8.288002 -4.31833,-2.318592 -4.71505,-3.202394 -5.43007,-12.097019 -0.32774,-4.077004 -1.07155,-10.204685 -1.65289,-13.617064 -0.92109,-5.406599 -0.85761,-6.50864 0.49369,-8.570974 0.85287,-1.301658 2.31037,-2.366646 3.2389,-2.366646 0.92851,0 2.47029,-0.864185 3.42617,-1.920426 1.51078,-1.669385 2.41127,-1.842287 6.88858,-1.322645 4.52864,0.525609 5.36894,0.356543 6.95861,-1.400006 1.06496,-1.176772 1.70116,-3.016177 1.54805,-4.4758 -0.30958,-2.951455 2.51698,-6.341354 6.02082,-7.220763 2.46553,-0.618807 6.74139,1.08072 11.31041,4.495564 1.21538,0.908366 3.00645,1.651566 3.98012,1.651566 2.92967,0 6.11354,4.019537 6.7977,8.581862 0.67792,4.520703 -1.49414,11.058651 -4.49769,13.538156 -2.24273,1.851413 -1.90248,3.824554 0.6595,3.824554 4.32336,0 10.11092,2.836214 15.10909,7.404248 2.79317,2.552797 5.39557,4.641446 5.78313,4.641446 0.38756,0 1.83937,2.084831 3.22623,4.632959 1.38687,2.548128 3.07249,4.63296 3.74581,4.63296 0.67333,0 2.68916,1.621489 4.47962,3.603312 3.04324,3.368513 3.52236,3.573225 7.35278,3.141479 4.71554,-0.531511 7.21273,1.179061 7.21273,4.94071 0,2.54394 -3.03548,9.086184 -5.54112,11.942594 -1.13268,1.29123 -1.49701,2.86128 -1.20149,5.17766 0.40682,3.18879 0.65705,3.39058 6.13149,4.94449 8.09202,2.29687 10.80362,3.40778 10.80362,4.42607 0,0.51021 1.21824,0.62022 2.86447,0.25866 2.36449,-0.51934 3.34289,-0.17078 5.60549,1.99693 1.57615,1.51004 3.8791,2.68331 5.41895,2.76076 4.40151,0.22136 10.08209,5.67706 10.16965,9.76706 0.018,0.84363 -1.36891,3.21164 -3.08216,5.26226 -2.27015,2.71721 -3.28694,5.02466 -3.74901,8.50784 -0.76905,5.79737 -1.9419,7.85414 -5.87664,10.30551 -1.65628,1.03186 -3.01142,2.65144 -3.01142,3.59904 0,0.94763 -0.42328,1.98454 -0.94063,2.30427 -0.51734,0.31974 -1.4952,1.90797 -2.173,3.52941 -0.67779,1.62143 -3.82249,5.34562 -6.98821,8.27597 -6.02405,5.57616 -9.12463,6.59359 -12.52236,4.10912 z",
	"m 460.39198,587.93787 -4.70793,-2.98569 -8.7912,2.02441 c -13.80415,3.17877 -15.43237,2.97629 -25.73074,-3.19981 -7.91311,-4.74562 -15.91105,-8.28763 -20.81561,-9.21853 -2.65962,-0.5048 -6.9847,-1.83939 -9.61131,-2.96577 -3.12667,-1.3408 -7.47167,-2.17316 -12.58365,-2.41062 -4.2944,-0.19947 -9.63023,-0.6697 -11.8574,-1.04496 -3.28868,-0.55413 -4.71222,-0.27266 -7.57767,1.49828 -2.9033,1.79434 -4.38969,2.07858 -8.39143,1.60463 -10.2549,-1.21454 -16.91426,-8.06898 -13.79132,-14.19531 1.73757,-3.40861 10.43584,-11.53058 17.68454,-16.51285 4.72634,-3.24857 6.95267,-4.18799 9.67973,-4.08443 1.9479,0.074 4.36894,-0.47513 5.38012,-1.2202 1.62452,-1.19703 1.76798,-2.18874 1.23269,-8.52129 -0.33319,-3.94163 -1.05161,-8.33918 -1.5965,-9.77234 -0.54489,-1.43315 -0.9907,-6.51632 -0.9907,-11.29594 l 0,-8.69021 4.40158,-4.70564 c 2.67709,-2.86203 7.13317,-6.07529 11.37368,-8.20153 11.43764,-5.73496 13.10081,-7.84595 13.90329,-17.64676 0.78373,-9.57193 -0.89285,-17.17713 -4.92877,-22.35739 -1.8994,-2.43798 -3.75482,-6.26512 -4.32398,-8.919 -0.54832,-2.55674 -1.8424,-6.11563 -2.87572,-7.90865 -3.77577,-6.55171 -3.42544,-16.8423 0.91706,-26.93669 3.72498,-8.65895 13.72946,-13.4062 30.13125,-14.29763 6.15619,-0.33458 7.55745,-0.71393 8.01996,-2.17118 0.82838,-2.61 5.33849,-6.80124 7.31869,-6.80124 0.94753,0 3.59129,1.74236 5.87502,3.8719 3.60121,3.35808 4.73594,3.8678 8.55093,3.84111 2.41928,-0.0169 5.24423,-0.67032 6.27766,-1.45196 2.74909,-2.07932 4.56942,-1.76356 8.32131,1.4434 2.75797,2.35738 4.24101,2.87154 8.37608,2.90392 2.7636,0.0217 5.29394,-0.39625 5.62297,-0.92864 0.66574,-1.0772 5.27666,-1.29676 7.70042,-0.36668 2.22387,0.85338 4.61342,5.91076 3.88184,8.21574 -0.33943,1.06947 0.0267,3.33454 0.81362,5.03349 0.78692,1.69895 1.73199,7.27937 2.10013,12.40092 l 0.66938,9.31192 -2.98482,3.39952 c -1.64166,1.86973 -2.98483,3.65034 -2.98483,3.9569 0,0.30657 1.9626,1.70755 4.36132,3.1133 4.63063,2.71373 4.87879,3.25421 5.75264,12.52928 0.50014,5.30853 0.24878,6.39037 -2.92372,12.58365 -1.90899,3.7267 -3.83106,7.14853 -4.27128,7.60407 -1.10219,1.14058 3.63395,10.30343 5.32569,10.30343 1.91346,0 3.37103,3.11904 3.37103,7.21366 l 0,3.46904 8.95375,-0.1622 c 11.20668,-0.203 18.44457,1.09353 21.35186,3.82479 1.23544,1.16064 3.05916,2.11025 4.0527,2.11025 0.99355,0 5.01376,2.21721 8.93381,4.92714 4.48657,3.10156 7.70435,4.70573 8.68461,4.32957 2.50468,-0.96114 7.73704,1.27211 9.58369,4.09046 2.49264,3.80424 3.01991,16.00661 0.95967,22.20938 -1.932,5.81672 -4.34224,8.14353 -10.73354,10.36198 -6.12368,2.12555 -6.42829,2.12496 -14.23086,-0.0275 l -6.48706,-1.78956 -2.32788,2.18693 c -1.28033,1.2028 -3.93152,2.44716 -5.89152,2.76522 -2.03438,0.33013 -3.97549,1.34785 -4.52337,2.37158 -2.14702,4.01173 -9.0928,5.79533 -13.95007,3.58221 -3.77097,-1.71817 -9.21432,1.08595 -9.21928,4.74927 -0.002,1.47267 -0.79944,3.98435 -1.77214,5.5815 -2.94068,4.82861 -3.2793,7.83327 -1.29915,11.5278 3.41864,6.37845 2.14033,8.84288 -9.8096,18.91158 -6.04309,5.09176 -10.64283,5.33719 -17.57967,0.93798 z",
	"m 501.06348,706.61235 c -3.3596,-1.34043 -5.72579,-3.70633 -5.72579,-5.72508 0,-1.5107 -0.55594,-1.66027 -4.27605,-1.15038 -3.59775,0.49313 -4.86807,0.19433 -8.00811,-1.88366 -2.05264,-1.35837 -4.00896,-3.34216 -4.34738,-4.40844 -0.50964,-1.60569 -1.42105,-1.93868 -5.30642,-1.93868 -5.19387,0 -8.49525,-2.25289 -8.49525,-5.79725 0,-1.0962 -0.7099,-3.19487 -1.57756,-4.66369 -1.47471,-2.49649 -1.46768,-3.06404 0.10793,-8.70608 2.18724,-7.83223 3.80401,-10.88246 6.81343,-12.8543 2.02411,-1.32626 2.78205,-1.39933 4.35097,-0.41952 1.56407,0.97678 2.1912,0.92286 3.54798,-0.30501 3.8472,-3.48166 7.62002,-1.10184 8.69684,5.48581 l 0.64725,3.95961 0.11902,-3.56639 c 0.13308,-3.98653 2.80761,-7.37055 5.82528,-7.37055 1.34154,0 1.89904,-0.6306 1.89179,-2.13983 -0.0148,-3.09138 -2.52959,-11.01188 -4.96695,-15.64426 l -2.10151,-3.99406 2.08942,-2.2241 c 1.30399,-1.38802 4.25846,-2.70527 7.85957,-3.50417 5.50008,-1.2202 5.87129,-1.18512 7.93076,0.74967 2.79506,2.62581 3.46455,2.5586 3.46455,-0.34783 0,-4.01574 3.27766,-6.38948 8.31648,-6.02297 5.52459,0.40187 6.30234,-1.32931 1.47122,-3.27472 -1.98327,-0.79863 -4.64347,-2.56409 -5.91155,-3.92324 -1.2681,-1.35916 -3.02256,-2.4712 -3.8988,-2.4712 -0.87626,0 -3.47645,-1.27611 -5.77822,-2.83581 -2.30175,-1.55969 -4.68714,-2.84359 -5.30084,-2.85311 -2.06406,-0.032 -6.82301,-4.80055 -7.39867,-7.41355 -0.31379,-1.42431 -1.84315,-5.11077 -3.39856,-8.19214 -3.14728,-6.23492 -3.33552,-7.62541 -1.48459,-10.96637 1.07451,-1.93955 1.06189,-2.81578 -0.08,-5.54862 -1.5516,-3.71349 -0.9276,-10.8142 1.25529,-14.28439 0.74885,-1.19048 1.61923,-4.92391 1.93417,-8.29652 0.82748,-8.86135 3.30903,-10.5162 12.85035,-8.56942 5.3397,1.0895 10.09007,-0.0946 10.45253,-2.60534 0.16489,-1.14213 1.40325,-2.69384 2.75193,-3.44826 2.16679,-1.21205 2.82012,-1.18808 5.61457,0.20598 3.85675,1.92399 3.50368,1.94373 4.0715,-0.22758 0.80741,-3.08757 4.75159,-4.88594 10.9058,-4.97256 3.86622,-0.0544 6.51223,0.43675 8.15649,1.51412 1.8702,1.22541 2.87455,1.3588 4.33713,0.57606 4.6368,-2.48154 11.53875,0.2928 11.53875,4.63815 0,0.8217 0.79634,1.9913 1.76965,2.59915 1.17201,0.73193 1.98975,2.76429 2.42137,6.01798 0.35843,2.70205 1.03412,5.62441 1.50152,6.49414 0.46741,0.86974 1.0892,2.72387 1.38174,4.12033 0.50625,2.41647 0.69793,2.49314 3.97239,1.58902 1.89226,-0.52248 4.56753,-0.65125 5.94504,-0.28615 1.37751,0.3651 4.15602,0.81884 6.17446,1.00832 2.01846,0.18947 4.97299,0.99455 6.56563,1.78907 3.85181,1.92154 5.6198,1.82469 10.19166,-0.5583 4.3311,-2.25749 7.69619,-1.9036 10.249,1.07789 0.88346,1.03181 2.29252,1.87602 3.13124,1.87602 2.40893,0 5.35716,-3.9391 5.97218,-7.97937 0.8133,-5.3428 4.59586,-10.485 9.43636,-12.82825 5.11381,-2.47555 6.94467,-2.51436 11.4024,-0.24168 3.47371,1.771 3.48803,1.76999 5.51373,-0.38628 1.26063,-1.34188 3.53299,-2.33166 5.99095,-2.60952 5.65836,-0.63964 10.29881,-2.64085 14.32908,-6.17948 2.7558,-2.41962 4.05435,-2.95364 6.07809,-2.49953 3.12233,0.70062 6.85323,4.56539 6.85323,7.09912 0,1.27886 0.65986,1.85386 2.13984,1.86469 3.66796,0.0268 9.63552,4.04483 10.60261,7.13883 1.31489,4.20679 4.73108,11.2109 7.07035,14.49608 1.13359,1.59199 2.06108,4.1555 2.06108,5.69668 0,1.54118 0.46998,4.15034 1.04441,5.79814 0.88225,2.53083 0.73459,3.52109 -0.95103,6.37801 -1.09751,1.86012 -1.99546,4.87671 -1.99546,6.70354 0,1.82682 -0.60169,4.48504 -1.33708,5.90714 -1.14876,2.22145 -1.14876,2.8432 0,4.41421 1.83461,2.50899 1.67712,4.58038 -0.56499,7.43077 -1.04614,1.32995 -1.90208,3.43227 -1.90208,4.67183 0,2.56235 -2.2385,6.14193 -5.4343,8.68997 -1.19567,0.95334 -2.17397,2.51081 -2.17397,3.46104 0,6.36089 -13.42292,9.5111 -22.01342,5.16631 -1.39342,-0.70475 -3.54898,-3.3437 -4.82842,-5.91122 l -2.31128,-4.63811 -3.05913,2.73335 c -1.68253,1.50333 -2.78959,3.16949 -2.46016,3.70254 1.09032,1.76416 -2.3803,5.58956 -7.36101,8.11347 -3.99906,2.02648 -6.35477,2.51251 -12.71179,2.62271 l -7.80305,0.13526 -1.10431,3.03998 c -0.62431,1.71862 -2.55988,3.93957 -4.45304,5.1096 -2.92224,1.80605 -4.16816,1.98888 -9.78304,1.4356 l -6.43431,-0.63401 -3.96387,4.30027 c -2.18011,2.36515 -3.96384,4.74643 -3.96384,5.29173 0,1.1661 -11.36073,8.67388 -16.16765,10.68446 -6.0422,2.52727 -13.83063,8.08721 -17.35702,12.39071 -1.90978,2.33063 -4.83478,4.80187 -6.5,5.49162 -2.72044,1.12685 -3.44519,1.03261 -7.14234,-0.92873 -5.23362,-2.77643 -7.93077,-2.15238 -12.79433,2.96028 -3.9672,4.17039 -3.26211,4.04225 -13.71105,2.49186 -1.37427,-0.20392 -2.51014,0.89538 -4.29086,4.15262 -1.33201,2.43647 -3.16574,5.25197 -4.07496,6.25663 -0.90922,1.00468 -1.65313,2.73925 -1.65313,3.8546 0,2.55071 -3.53489,5.92544 -6.12331,5.84586 -1.07827,-0.0331 -3.02163,-0.48366 -4.31855,-1.00112 z",
	"m 365.8117,705.63753 c -1.86077,-1.26443 -3.62913,-2.93982 -3.92971,-3.72309 -0.30057,-0.78328 -1.93696,-2.04504 -3.63641,-2.80392 -1.69946,-0.75887 -5.62302,-3.752 -8.71903,-6.65138 -5.66187,-5.30229 -9.41711,-8.27137 -17.53131,-13.86116 -11.90652,-8.20226 -13.93431,-10.18684 -16.74699,-16.39006 l -2.75847,-6.08367 1.94964,-9.51034 c 1.07231,-5.23069 2.7562,-11.35829 3.74199,-13.6169 0.98579,-2.25859 1.79233,-4.72789 1.79233,-5.48732 0,-2.82438 3.22613,-8.0403 6.02311,-9.73803 2.61854,-1.5894 4.81341,-4.73688 9.61481,-13.78776 l 1.64334,-3.09776 -4.65334,-3.92355 c -5.41235,-4.56352 -11.32691,-10.44743 -14.2957,-14.22164 -2.67447,-3.40004 -2.66433,-7.16681 0.026,-9.64068 2.27101,-2.08833 9.02766,-5.89145 10.46678,-5.89145 0.48301,0 1.54472,-0.58333 2.35935,-1.2963 3.02427,-2.64685 5.25265,-2.57003 9.53047,0.32854 4.4629,3.02398 7.3002,3.49045 10.5415,1.73308 1.85323,-1.00479 6.86425,-1.73098 22.23517,-3.2223 4.27716,-0.41499 6.92192,0.0763 15.24444,2.83151 5.53822,1.83347 11.09899,4.00815 12.35727,4.8326 1.25828,0.82446 4.35798,2.04512 6.88822,2.71259 2.53023,0.66747 6.88403,2.67141 9.67511,4.4532 2.79107,1.7818 6.50977,3.73755 8.26377,4.34611 4.39328,1.52428 12.20104,1.38597 16.98187,-0.3008 4.44251,-1.56741 9.00364,-1.84003 9.77958,-0.58455 0.27966,0.45251 2.86932,1.78093 5.7548,2.95207 l 5.24632,2.12932 4.0023,-4.35934 c 3.03777,-3.30875 4.67334,-4.35933 6.78674,-4.35933 4.44279,0 8.34966,4.42167 10.48866,11.8707 1.97882,6.8912 3.55604,8.04939 10.90394,8.00701 5.8383,-0.0337 6.67097,0.20752 9.09937,2.63593 1.5607,1.5607 2.67301,3.68283 2.67301,5.09974 0,1.96569 0.83494,2.82608 4.39459,4.52854 5.80839,2.77799 7.02265,5.70486 5.48049,13.21023 -1.30349,6.34384 -2.47148,7.4143 -7.25698,6.65102 -3.13217,-0.49959 -3.77502,-0.21919 -6.42994,2.80459 -2.81606,3.20732 -3.22651,3.35967 -9.05121,3.35967 -5.45771,0 -6.02597,0.17321 -5.38654,1.64182 1.16421,2.67388 1.33774,15.03588 0.25468,18.14274 -0.62096,1.78129 -2.17455,3.4326 -4.08793,4.34502 -2.79393,1.33233 -3.03757,1.77202 -2.57192,4.64145 0.63755,3.92882 -1.69664,6.87998 -5.44166,6.87998 -2.09821,0 -15.00937,-4.50227 -18.01976,-6.2837 -0.40582,-0.24015 -0.63321,2.44754 -0.50531,5.97263 0.15223,4.19567 -0.24775,7.38135 -1.15808,9.22382 -1.27715,2.5849 -1.77176,2.808 -6.06196,2.73428 -9.57225,-0.16448 -19.80856,-1.63087 -23.7981,-3.40916 -4.6701,-2.08164 -5.18389,-1.74187 -6.10837,4.03947 -0.3144,1.96621 -1.58855,4.75773 -2.83144,6.20337 -2.13816,2.48698 -2.74669,2.64603 -11.30674,2.95531 -5.87266,0.21219 -10.05253,-0.0896 -11.91285,-0.86021 -2.73409,-1.1325 -3.00138,-1.03108 -5.81177,2.20523 -2.90716,3.34769 -9.79512,8.88503 -13.55581,10.89768 -3.11034,1.66462 -7.00266,1.20156 -10.63231,-1.26485 z",

	"m 558.96158,100.01941 c -1.75553,-0.356681 -4.62407,-1.799471 -6.37453,-3.206183 -5.93136,-4.766566 -10.29057,-6.503657 -17.66388,-7.038818 -6.26665,-0.454838 -7.38436,-0.824222 -12.4186,-4.10416 -3.32525,-2.166481 -5.88162,-4.516464 -6.40819,-5.8908 -1.69246,-4.41733 -3.35368,-11.661019 -3.82062,-16.659607 -0.7624,-8.161602 2.72446,-13.270385 7.76183,-11.372265 2.72311,1.0261 2.75708,1.000714 1.85078,-1.383049 -1.01385,-2.666617 0.31154,-5.837108 2.94097,-7.035157 1.1256,-0.512859 2.1162,-1.923499 2.42101,-3.447607 0.93837,-4.691786 8.5395,-6.723846 14.52565,-3.88323 2.88405,1.368571 4.69576,4.229821 4.69576,7.416053 0,1.713509 0.41166,1.867342 4.99696,1.867342 7.19832,0 8.04512,1.033907 9.37155,11.442239 0.59289,4.652378 0.8736,8.991487 0.6238,9.64248 -0.47155,1.22881 2.16291,4.030951 6.73041,7.158806 3.13098,2.144112 5.3905,6.491882 5.43242,10.453079 0.0166,1.561287 0.57517,3.792314 1.24145,4.957846 3.03205,5.304024 0.44906,11.01957 -4.98,11.01957 -1.57347,0 -3.95751,0.160201 -5.29787,0.356001 -1.34036,0.19578 -3.87336,0.0642 -5.6289,-0.29254 z",
	"m 481.70494,145.63273 c -1.29278,-1.19811 -2.3505,-2.73709 -2.3505,-3.41998 0,-1.57181 3.93044,-6.88376 9.33204,-12.6121 7.39741,-7.84489 7.3617,-7.68814 2.79306,-12.25677 -3.81188,-3.81189 -3.98325,-4.2117 -4.31613,-10.06939 -0.31588,-5.55844 1.19604,-14.487422 3.25151,-19.202523 0.55608,-1.275593 0.22227,-1.555146 -1.86022,-1.557873 -5.16681,-0.0071 -10.80478,-5.223848 -9.63346,-8.914323 0.71506,-2.252979 2.519,-3.142972 7.97857,-3.936308 3.39663,-0.493565 5.1241,-1.352876 7.37136,-3.666802 3.67242,-3.781377 7.31755,-4.043696 10.37328,-0.746504 1.15996,1.251609 2.6399,2.203597 3.28877,2.11553 5.33909,-0.724634 8.67488,1.364087 11.06483,6.928301 2.08078,4.844387 7.26364,7.559387 15.17372,7.948611 7.51462,0.369761 11.40702,2.042865 22.91018,9.847649 6.21063,4.213852 6.21885,4.224932 6.75339,9.093242 0.29435,2.68084 1.18143,6.86203 1.97129,9.29151 1.23892,3.81078 1.26605,4.6768 0.19757,6.3075 -1.33202,2.03293 -6.4768,4.82075 -8.89645,4.82075 -0.81528,0 -3.27514,1.29916 -5.46635,2.88701 -2.19122,1.58786 -5.2337,3.79534 -6.76106,4.90551 -2.56125,1.86166 -3.37612,1.97327 -10.48735,1.43644 -7.20615,-0.54399 -7.89782,-0.44363 -10.57777,1.53477 -2.41689,1.78421 -3.90733,2.11682 -9.48558,2.11682 -6.45189,0 -6.66254,0.0701 -8.38601,2.78992 -2.11563,3.33868 -5.99194,5.13348 -9.44775,4.37446 -1.61422,-0.35455 -3.15067,-0.0757 -4.27817,0.7766 -2.78748,2.10695 -7.79149,1.72995 -10.51277,-0.79205 z",
	"m 494.2269,178.41061 c -8.53009,-1.96149 -8.55213,-1.9762 -11.39441,-7.60673 l -2.74331,-5.43448 2.33457,-5.21588 c 3.74976,-8.37763 6.93667,-14.22992 8.3826,-15.39337 0.84425,-0.67931 2.9492,-0.89232 5.65321,-0.57207 4.0648,0.48142 4.42641,0.34411 6.40267,-2.4313 2.85894,-4.01501 6.74322,-5.48225 12.84591,-4.8524 4.03807,0.41677 5.53741,0.15581 8.10784,-1.41116 2.60786,-1.58978 4.60779,-1.92307 11.55651,-1.92588 l 8.4029,-0.004 5.44185,-4.13856 c 2.99302,-2.27621 5.6821,-4.52727 5.97571,-5.00236 0.29362,-0.47509 1.90809,-0.86379 3.5877,-0.86379 1.67962,0 3.19027,-0.3244 3.35702,-0.72087 0.16675,-0.39649 1.73567,-1.59373 3.48649,-2.66053 2.50654,-1.52726 4.68172,-1.9472 10.23123,-1.97521 3.87635,-0.0196 7.83995,-0.45947 8.80802,-0.97756 2.5777,-1.37954 7.07641,-1.1509 10.6415,0.54085 3.65918,1.7364 5.10373,4.01531 4.70968,7.42996 -0.2247,1.94704 0.41953,2.97294 3.10781,4.94901 1.8652,1.37104 3.65102,3.52772 3.96849,4.79263 0.70198,2.7969 -1.05183,7.34107 -3.49324,9.0511 -1.70897,1.19702 -1.57729,1.41319 2.7581,4.52786 4.04441,2.90562 7.47293,7.66847 7.47293,10.3813 0,0.52615 -0.47139,1.99124 -1.04755,3.25576 -1.13232,2.48518 -3.30345,3.57366 -7.59288,3.80665 -1.50071,0.0815 -4.33891,0.57604 -6.30711,1.09893 -4.2199,1.1211 -8.53302,-0.27239 -10.7822,-3.48356 -1.79206,-2.55851 -3.18351,-1.74967 -2.69665,1.56756 0.74339,5.06497 -5.19655,9.32989 -13.01395,9.34413 -1.94086,0.004 -3.59599,-0.85173 -5.45712,-2.81991 -2.62799,-2.77913 -2.78089,-2.81698 -9.42308,-2.332 -4.99443,0.36466 -7.43517,0.13955 -9.37749,-0.86486 -2.3907,-1.23628 -3.10967,-1.19036 -8.03157,0.51296 -6.79277,2.35078 -7.96658,2.33871 -10.57173,-0.10869 l -2.10708,-1.9795 -12.04909,6.08547 c -12.0079,6.06489 -15.02001,6.83841 -21.14428,5.43014 z"
]


var cards_images = {
	east : ["cardI.png","cardII.png","cardIII.png","cardIV_1.png","cardIV_2.png"],
	decade_back: ['decade_I_back.jpg','decade_II_back.jpg','decade_III_back.jpg','decade_IV_back.jpg']
};

var N = {
	provinces: ['Schleswig-Holstein','Niedersachsen','Nordrhein-Westfalen','Hessen','Rheinland-Pfalz','Baden-Wurttemberg','Bayern','West Berlin','Mecklenburg-Vorpommern','Brandenburg','East Berlin','Sachsen-Anhalt','Sachsen','Thuringen'],
	factories: ['','Flensburg','Kiel','Hamburg','Bremen','Hanover','Wolfsburg','Bielefeld','Duisburg','Dortmund','Köln','Kassel','Giessen','Fulda','Frankfurt','Koblenz','Saarbrücken','Kaiserslautern',
		'Manheim','Heilbronn','Stuttgart','Ulm','Bayreuth','Nürnberg','Ingolstadt','München','Rostock','Neubrandenburg','Schwedt','Rheinsberg','East Berlin','Cottbus','Magdeburg','Bitterfeld','Leipzig',
		'Dresden','Karl-Marx-Stadt','Eisenach','Jena','Polska (North)','Polska (South)','CSSR (East)','CSSR (West)']
}

function View(game, pov) {
	this.game = game;
	this.pov = pov;

	this.display();
}

View.prototype.display = function() {
	if (this.game.win == undefined) {
		if (this.game.workflow.phase == R.END_OF_DECADE) {
			this.endOfDecade();
		} else {
			this.cardRow();
		}
	} else {
		this.pov = R.DUAL;
		this.displayWinningCondition();
	}
	this.playersInformation();
	this.workflow();
	this.lines();
	this.drawSocialistsBox();
	this.refreshBoard();
	this.drawWall();
}

View.prototype.refreshPlayers = function() {
	this.playersInformation();
}

View.prototype.refreshBoard = function() {
	this.refreshRoads();
	this.refreshFactories();
	this.refreshUnrest();
	this.refreshLS();
	this.refreshSocialists();
	this.refreshMassProtests();
	this.flightLevel();
}

View.prototype.refreshRoads = function() {
	$(".road").remove();
	this.drawAllRoads();
}

View.prototype.refreshFactories = function() {
	$(".factory").remove();
	this.drawAllFactories();
}

View.prototype.refreshUnrest = function() {
	$(".unrest").remove();
	this.drawAllUnrest();
}

View.prototype.refreshLS = function() {
	$(".ls").remove();
	this.drawAllLS();
}

View.prototype.refreshSocialists = function() {
	$(".socialist").remove();
	this.drawAllSocialists();
}

View.prototype.refreshMassProtests = function() {
	$(".massprotest").remove();
	this.drawAllMassProtest();
}

View.prototype.displayWinningCondition = function() {
	if (this.game.win != undefined) {
		$("#cardrow").empty();
		$("#actiondetail").empty();
		var st = $('<div class="victory">');

		switch(this.game.win) {
			case R.NATIONAL_INSOLVENCY: st.append('<div><img src="img/brd-coat.png" /></div><p>East is so poor that s/he cannot afford to dismantle one more point. S/he loses</p>'); break;
			case R.TRIUMPH_OF_SOCIALISM: st.append('<div><img src="img/ddr-coat.png" /></div><p>Triumph of Socialism ! Socialism has spread over the whole country, East wins !</p>'); break;
			case R.SOCIALISM_FAILS: st.append('<div><img src="img/brd-coat.png" /></div><p>Socialism fails ! There is so few socialists in East Germany that East loses the game !</p>'); break;
			case R.EAST_COLLAPSE: st.append('<div><img src="img/brd-coat.png" /></div><p>East collapses because s/he has 4 or more Mass Protest markers in her/his territory.</p>'); break;
			case R.WEST_COLLAPSE: st.append('<div><img src="img/ddr-coat.png" /></div><p>West collapses because s/he has 4 or more Mass Protest markers in her/his territory.</p>'); break;
			case R.DOUBLE_COLLAPSE: st.append('<div><img src="img/ddr-coat.png" /></div><p>Both East and West collapse. It is an East victory</p>'); break;
			case R.FULL_GAME: st.append('<div><img src="img/ddr-coat.png" /></div><p>The game is over. East wins because West fails to achieve victory in 4 decades</p>'); break;
			default: st.append('The game is finished, but I don\'t know how ! ');
		}
		$("#actiondetail").append(st);
	}
}

View.prototype.playersInformation = function(side) {
	if (side == undefined) side = this.game.workflow.currentPlayer;
	var g = this.game;
	$("#west").empty();
	$("#west").append('<h3 class="player_title">' + g.players[0].name + '</h3>');

	var shouldAppendHamburg = false;

	if (side == R.WEST && (this.pov == R.WEST || this.pov == R.DUAL)) {
		if (g.workflow.phase != R.END_OF_DECADE) {
			shouldAppendHamburg = true;
		}
	}
	if (this.game.win != undefined) shouldAppendHamburg = false;

	if (g.players[0].hand != undefined && g.players[0].hand.length != undefined) {
		$("#west").append(this.giveHand(g.players[0].hand, R.WEST));
	} else {
		$("#west").append('<p class="hand">No card in hand</p>');
	}

	if (shouldAppendHamburg) $("#west").append(this.giveHamburgButton());
	else {
		$("#west").append('<span>Hamburg is in ' + N.provinces[R.provinceForCity(R.HAMBURG)-50] + '</span>');
	}

	$("#east").empty();
	$("#east").append('<h3 class="player_title">' + g.players[1].name + '</h3>');

	if (g.players[1].hand != undefined && g.players[1].hand.length != undefined) {
		$("#east").append(this.giveHand(g.players[1].hand, R.EAST));
	} else {
		$("#east").append('<p class="hand">No card in hand</p>');
	}
	if (g.players[1].stasi === true) {
		var span = $('<span class="police">');
		span.append('<img src="' + giveIconImageFromType(R.STASI_DISBANDMENT) + '" />');
		$("#east").append(span);
	} else if (g.players[1].police != undefined && g.players[1].police.length == 3) {
		var cpt = 0;
		for (var i = 0 ; i < g.players[1].police[0] ; i++) {
			$("#east").append(this.givePoliceIcon(false, (cpt++ < g.players[1].police[2])));
		}
		for (var i = 0 ; i < g.players[1].police[1] ; i++) {
			$("#east").append(this.givePoliceIcon(true, (cpt++ < g.players[1].police[2])));
		}
	}
}

View.prototype.givePoliceIcon = function(pink, used) {
	var span = $('<span class="police">');

	if (pink === true) {
		span.append('<img src="img/pinkPolice.png" />');
	} else {
		span.append('<img src="img/redPolice.png" />');
	}

	if (used !== true) {
		if (this.game.workflow.currentPlayer == R.EAST && (this.pov == R.EAST || this.pov == R.DUAL)) {
			span.addClass('activeable');
		}
	} else {
		span.append('<img class="cube" src="img/unrest.png" />');
	}

	return span;
}

View.prototype.giveHamburgButton = function() {
	var pr = R.provinceForCity(R.HAMBURG)
	var name = N.provinces[pr-50];
	var p = $('<p id="hamburgSelection">');
	p.append('<span>Hamburg in ' + name + '</span> ')
	var pr2 = pr + 1;
	if (pr == R.NIEDERSACHSEN) pr2 = R.SCHLESWIG_HOLSTEIN;
	var but = $('<button id="hamburgButton">Switch to ' + N.provinces[pr2-50] + '</button>');
	but.data('to', pr2);
	$(p).append(but);
	return p;
}

View.prototype.updateHamburgButton = function() {
	var pr = R.provinceForCity(R.HAMBURG)
	var name = N.provinces[pr-50];
	var p = $('#hamburgSelection');
	p.empty();
	p.append('<span>Hamburg in ' + name + '</span> ')
	var pr2 = pr + 1;
	if (pr == R.NIEDERSACHSEN) pr2 = R.SCHLESWIG_HOLSTEIN;
	var but = $('<button id="hamburgButton">Switch to ' + N.provinces[pr2-50] + '</button>');
	but.data('to', pr2);
	$(p).append(but);
}

View.prototype.giveHand = function(hand, side) {
	var div = $('<div class="hand"/>');
	if (this.canView(side)) {
		for (var i = 0 ; i < hand.length ; i++) {
			var img = giveCard(hand[i], i);
			if (hand[i] == 50) $("#guillaumeaffairehelp").show();
			img.addClass('hand p' + side);
			div.append(img);
		}
	} else {
		for (var i = 0 ; i < hand.length ; i++) {
			var decade = Math.floor((hand[i] - 1)/20);
			div.append('<img class="back" src="img/' + cards_images.decade_back[decade] + '" />');
		}
	}
	return div;
}

View.prototype.addResetValidateButtons = function(reset, validate, replace, callback) {
	if (reset == undefined) reset = true;
	if (validate == undefined) validate = false;

	$(".resetvalidateline").remove();

	var div = $('<div class="resetvalidateline">');

	if (reset === true) div.append('<button class="resetvalidate" data-type="0">Reset</button>');
	if (validate === true) {
		if (callback != undefined) div.append('<button class="resetvalidate" data-type="1" data-callback="' + callback + '">Validate</button>');
		else div.append('<button class="resetvalidate" data-type="1" >Validate</button>');
	}

	if (replace === true) $("#actiondetail").empty();

	$("#actiondetail").append(div);
}

function giveCard(type, index, clazz) {
	var img = $("<img />");
	if (clazz == undefined) clazz = 'card';
	img.attr({
		'src': 'img/card' + (type < 10 ? "0" + type : type) + ".png",
		'class' : clazz
	});
	if (type > 80) {
		img.attr({
			'src': 'img/' + cards_images.east[type-81]
		});
	}
	img.data('card',type);
	if (index != undefined) img.data('index', index);
	return img;
}

View.prototype.canView = function(side) {
	return (this.pov != undefined && (this.pov == R.DUAL || side == this.pov));
}

View.prototype.workflow = function() {
	var g = this.game;

	if (g.workflow != undefined) {
		$("#workflow").empty();

		var s = '<div class="menu">';
		s += '<a href="../" ><img src="img/house.svg"/><span>HOME</span></a>';
		if (global.termidor != true) s += '<a href="#" class="chatbutton"><img src="img/conversation.svg"/><span>CHAT</span></a>' ;
		s += '<a href="#" class="displayDiscard"><img src="img/stack.svg"/><span>CARDS</span></a>';
		s += '<a href="#" class="displayFullHisto"><img src="img/white-book.svg"/><span>HISTORY</span></a>';
		if (global.pov == R.EAST || global.pov == R.WEST) s += '<a href="#" class="forkGame"><img src="img/tick.svg"/><span>BUG</span></a>';
		s += '<a href="help.html" target="_blank"><img src="img/help.svg"/><span>HELP</span></a>';
		s += '<a href="#" class="credits"><img src="img/scales.svg"/><span>CREDITS</span></a></div>';

		s += '<div class="workflowstatus">';
		if (g.workflow.phase == R.CHANGE_HAND){
			s += "DECADE : " + romanDecade(g.workflow.decade) + " | DISCARDING CARDS";
		} else if (g.workflow.phase == R.END_OF_DECADE) {

			s += "CURRENT PLAYER : ";
			if (g.players[g.workflow.currentPlayer-1] != undefined) {
				if (g.workflow.currentPlayer == R.WEST) ccllaass = "west";
				else ccllaass = "east";
				s += '<span class="' + ccllaass + '">' + g.players[g.workflow.currentPlayer-1].name + '</span>';
			}

			s += " | END OF DECADE " + romanDecade(g.workflow.decade);
		} else {

			s += "CURRENT PLAYER : ";
			if (g.players[g.workflow.currentPlayer-1] != undefined) {
				if (g.workflow.currentPlayer == R.WEST) ccllaass = "west";
				else ccllaass = "east";
				s += '<span class="' + ccllaass + '">' + g.players[g.workflow.currentPlayer-1].name + '</span>';
			}

			s += " | DECADE : " + romanDecade(g.workflow.decade);
			if (g.firstHalfOfDecade()) s += " - First half";
			else s += " - Second half";

		}

		s += "</div>";
		$("#workflow").html(s);
		$(".chatbutton").on('click', {view: this}, this.toggleChat);
		$(".displayDiscard").on('click', {view: this}, this.viewDiscard);
		$(".displayFullHisto").on('click', {view: this}, this.fullHistory);
		$(".credits").on('click', {view: this}, this.credits);
		$(".forkGame").on('click', {view: this}, this.prepareBug);
	}
}

function romanDecade(num) {
	switch (num) {
		case 1: return "I";
		case 2: return "II";
		case 3: return "III";
		case 4: return "IV";
	}
	return num;
}

View.prototype.cardRow = function() {
	var g = this.game;

	if (g.cardRow != undefined) {
		$("#cardrow").empty();
		$("#cardrow").append('<h3>Card Row</h3>');

		if (g.eastCard > 80) {
			var img = giveCard(g.eastCard);
			var div = $('<div>');
			div.append(img);
			$("#cardrow").append(div);
		}

		for (var i = 0 ; i < g.cardRow.length ; i++) {
			var card = g.cardRow[i];
			var img = giveCard(card, i);
			if (g.cardRow[i] == 50) $("#guillaumeaffairehelp").show();
			$("#cardrow").append(img);
		}
	}
}

View.prototype.endOfDecade = function() {
	var g = this.game;

	if  (g.workflow.phase == R.END_OF_DECADE && g.workflow.subphase != undefined && g.workflow.subphase > 0 && g.workflow.subphase < 11) {
		$("#guillaumeaffairehelp").hide();
		$("#cardrow").empty();
		$("#actiondetail").empty();
		$("#cardrow").append('<h3>End of Decade</h3>');

		var div = $('<div>');
		var src =  g.workflow.subphase;
		if (src == 1 && (this.game.wall == undefined || this.game.wall === false)) src += 'bis';
		div.append('<img src="img/decade' + src + '.png" />');
		$("#cardrow").append(div);
	}
}

View.prototype.discardHand = function(side) {
	var g = this.game;

	if  (g.workflow.phase == R.CHANGE_HAND) {
		$("#cardrow").empty();
		$("#actiondetail").empty();
		$("#cardrow").append('<h3>Discard Hand</h3>');

		var hand = g.players[side].hand;

		var div = $('<div class="discardLine">');
		div.append('<p>Discard your hand card(s) ?</p>');
		if (hand != undefined && hand.length == 3) {
			div.append('<p>You cannot keep 3 cards in hand for the next decade, please remove at least one</p>');
		}

		for (var i = 0 ; i < hand.length ; i++) {
		    var card = giveCard(hand[i], i);
			var span = $('<span class="discardHolder">');
		    span.append(card);
		    var caption = $('<span class="discardWarning">Discarded</span');
		    span.append(caption);
			div.append(span);
		}

        div.append('<p>Press ok to confirm the above selection</p>');
		$("#cardrow").append(div);
		var divbuttons = $('<div>');
		divbuttons.append('<input type="button" value="reset" class="discardhand" data-action="cancel"/>');
		divbuttons.append('<input type="button" value="ok" class="discardhand" data-action="ok"/>');
		$("#cardrow").append(divbuttons);
		$("#cardrow img").addClass('pointer');
	}
}

View.prototype.discardDrawbackCard = function() {
	var g = this.game;
	var side = R.EAST - 1;

	if  (g.players[side].hand != undefined && g.players[side].hand.length > 0) {

		var hand = g.players[side].hand;

		var div = $('<div class="discardLine">');
		div.append('<p>Select a card to discard</p>');

		for (var i = 0 ; i < hand.length ; i++) {
		    var card = giveCard(hand[i], i);
		    var span = $('<span class="discardHolder">');
		    span.append(card);
		    var caption = $('<span class="discardWarning">Discarded</span');
		    span.append(caption);
			div.append(span);
		}

		$("#actiondetail").html(div);
		$("#actiondetail img").addClass('pointer');
	}
}

View.prototype.lines = function() {
	var g = this.game;
	$(".marker").remove();
	
	if (g.lines != undefined) {
		var img = $("<img/>");
		img.attr({
			'class': 'abs marker',
			'src' : 'img/prestige_marker.png'
		});
		img.css({
			'top' : '20px',
			'left' : (214 + g.lines[0]*31) + 'px'
		});
		$("#board").append(img);
		var img2 = $("<img/>");
		img2.attr({
			'class': 'abs marker',
			'src' : 'img/wc_marker.png'
		});
		img2.css({
			'top' : '60px',
			'left' : (214 + g.lines[1]*31) + 'px'
		});
		$("#board").append(img2);
		var img3 = $("<img/>");
		img3.attr({
			'class': 'abs marker',
			'src' : 'img/socialist_marker.png'
		});
		img3.css({
			'top' : '98px',
			'left' : (214 + g.lines[2]*31) + 'px'
		});
		$("#board").append(img3);
	}
}

View.prototype.flightLevel = function () {
	var level = Rules.computeFlightLevel(this.game);
	$(".flight").remove();

	var img = $('<img src="img/flight_track_marker.png" class="flight" />');
	img.css({
		top: "1025px",
		left: 29+level*31.3 + "px"
	});

	$("#board").append(img);

	for (var i = 0 ; i < Rules.giveFlightIconsInDiscard(this.game) ; i++) {
		var img2 = $('<img src="img/flight.png" class="flight" />');
		img2.css({
			top: "970px",
			left: 10+i*25 + "px"
		});

		$("#board").append(img2);
	}

}

View.prototype.drawAllRoads = function() {
	var g = this.game;

	if (g.roads != undefined) {
		for (var i = 0 ; i < g.roads.length ; i++) {
			this.drawRoad(g.roads[i]);
		}
	}
}

View.prototype.drawRoad = function(index, proposal, neuw) {

	var strict = Math.floor(index);
	var ref = S.roads[strict];
	var img = $('<img class="road"/>');

	if (proposal) img.addClass("proposal");
	if (neuw) img.addClass("new");
	img.data('index', index);
	var src = this.roadImage(index);
	if (proposal & neuw) src = 'img/infrastructure_invisible.png';
	img.attr('src', src);

	if (strict != index || ref.length == 6) {
		var seg = Math.round((index - strict)*10);
		if (seg <= 1) {
			img.css({
				top: ref[1] + "px",
				left: ref[0] + "px",
				transform: 'rotate(' + ref[2] + 'deg)'
			});

			$("#board").append(img);
		} else if (seg == 2) {
			img.css({
				top: ref[4] + "px",
				left: ref[3] + "px",
				transform: 'rotate(' + ref[5] + 'deg)'
			});

			$("#board").append(img);
		} else if (seg > 2) {
			img.css({
				top: ref[1] + "px",
				left: ref[0] + "px",
				transform: 'rotate(' + ref[2] + 'deg)'
			});
			var img2 = $('<img class="road"/>');
			if (proposal) img2.addClass("proposal");
			if (neuw) img2.addClass("new");
			img.data('index', strict+0.1);
			img2.data('index', strict+0.2);
			img2.attr('src',src).css({
				top: ref[4] + "px",
				left: ref[3] + "px",
				transform: 'rotate(' + ref[5] + 'deg)'
			});

			$("#board").append(img);
			$("#board").append(img2);
		}
	} else {
		img.css({
			top: ref[1] + "px",
			left: ref[0] + "px",
			transform: 'rotate(' + ref[2] + 'deg)'
		});

		$("#board").append(img);
	}
	
}

View.prototype.roadImage = function(road) {
	var base;

	if (road < 42) {
		base = 'img/infrastructure_yellow.png';
		if (Rules.nbFactoriesBuildOnThisRoad(this.game, road) < 2) base = 'img/infrastructure_red.png';
	} else {
		base = 'img/infrastructure_red.png';
		if (Rules.nbFactoriesBuildOnThisRoad(this.game, road) < 2) base = 'img/infrastructure_yellow.png';
	}
	return base;
},

View.prototype.proposeRoads = function(list) {
	$(".road").each(function() {
		var d = $(this).data('index');
		if (list.indexOf(d) > -1) $(this).addClass('proposal');
	});

}

View.prototype.proposeFactories = function(list) {
	$(".factory").each(function() {
		var d = $(this).data('index');
		if (list.indexOf(d) > -1) $(this).addClass('proposal');
	});
}

View.prototype.drawAllFactories = function() {
	var g = this.game;
	var f = Rules.factoriesStrength(g);

	for (var i = 0 ; i < f.length ; i++) {
		var rundown = (g.rundown != undefined && g.rundown.indexOf(i+1) > -1);

		if (f[i] > 0 || rundown) this.drawFactory(i+1,f[i], rundown);
	}
}

View.prototype.drawFactory = function(index, strength, rundown, proposal, neuw) {
	if (strength == undefined) strength = 1;
	if (strength > 6) strength = 6;
	var img = $("<img/>");
	if (proposal) img.addClass("proposal");
	if (neuw) img.addClass("new");

	if (index < 26) img.attr('src', 'img/west_factory_' + strength + '.png');
	else if (index == R.RHEINSBERG && !rundown) img.attr('src', 'img/rheinsberg_factory.png');
	else if (index == R.RHEINSBERG && rundown) img.attr('src', 'img/rheinsberg_factory_rundown.png');
	else if (index < 39 && !rundown) img.attr('src', 'img/east_factory' + strength + '.png');
	else if (index < 39 && rundown) img.attr('src', 'img/east_rundown_factory' + strength + '.png');
	else img.attr('src', 'img/extrenal_factory_' + strength + '.png');

	if (proposal && neuw) {
		img.attr('src', '');
		img.css({
			width: "40px",
			height: "37px"
		});
	}

	img.addClass('factory');
	img.data('index', index);

	var ref = S.factories[index];

	img.css({
		top: ref[1] + "px",
		left: ref[0] + "px"
	});

	$("#board").append(img);
}

View.prototype.drawAllUnrest = function() {
	var g = this.game;

	if (g.provinces) {
		for (var i = 0 ; i < g.provinces.length ; i++) {
			var un = g.provinces[i].unrest;
			if (un != undefined && (un > 0 || un.length > 0)) this.drawUnrest(i, un);
		}
	}
}

View.prototype.drawUnrest = function(index, strength) {
	
	var ref = S.unrest[index];

	var img = $('<img class="unrest" src="img/unrest.png"/>');

	img.css({
		top: ref[1] + "px",
		left: ref[0] + "px"
	});

	var clazz = "number unrest";
	if (index > (R.WEST_BERLIN - 50)) {
		clazz += " labeleast";
	} else {
		clazz += " labelwest";
	}
	var span = $('<span class="' + clazz + '">' + strength + '</span>');
	span.css({
		top: ref[1]+10 + "px",
		left: ref[0] + "px"
	});

	if (strength > 0) {
		$("#board").append(img);
		$("#board").append(span);
	}
	
}

View.prototype.drawAllLS = function() {
	var g = this.game;

	if (g.provinces) {
		for (var i = 0 ; i < g.provinces.length ; i++) {
			var un = g.provinces[i].ls;
			if (un != undefined && (un > 0 || un.length > 0)) this.drawLS(i, un);
		}
	}
}

View.prototype.drawLS = function(index, strength) {
	
	var ref = S.unrest[index];

	if (index === (R.WEST_BERLIN - 50)) {
		ref = [[527,54],[493,85],[499,139]];
		if (ref.length != undefined && ref.length == strength.length) {
			for (var i = 0 ; i < ref.length ; i++) {
				var img = $('<img class="ls" src="img/ls_marker.png"/>');
		
				img.css({
					top: ref[i][1] + "px",
					left: ref[i][0] + "px"
				});

				var span = $('<span class="number ls labelwest">' + strength[i] + '</span>');
				span.css({
					top: ref[i][1]+10 + "px",
					left: ref[i][0] + "px"
				});

				if (strength[i] > 0) {
					$("#board").append(img);
					$("#board").append(span);
				}
			}
		}
	} else {
		var img = $('<img class="ls" src="img/ls_marker.png"/>');

		img.css({
			top: ref[1]+25 + "px",
			left: ref[0]+15 + "px"
		});

		var clazz = "number ls";
		if (index > (R.WEST_BERLIN - 50)) {
			clazz += " labeleast";
		} else {
			clazz += " labelwest";
		}
		var span = $('<span class="' + clazz + '">' + strength + '</span>');
		span.css({
			top: ref[1]+35 + "px",
			left: ref[0]+15 + "px"
		});

		if (strength > 0) {
			$("#board").append(img);
			$("#board").append(span);
		}
	}

}

View.prototype.drawAllSocialists = function() {
	var g = this.game;

	if (g.provinces && g.provinces.length >= (R.MECKLENBURG_VORPOMMERN-50)) {
		for (var i = (R.MECKLENBURG_VORPOMMERN-50) ; i < g.provinces.length ; i++) {
			var un = g.provinces[i].socialists;
			if (un != undefined && un > 0) this.drawSocialist((i - R.MECKLENBURG_VORPOMMERN + 50), un);
		}
	}
}

View.prototype.drawSocialist = function(index, strength) {
	
	var ref = S.unrest[index+8];
	var img = $('<img class="socialist" src="img/socialist_cube.png"/>');

	img.css({
		top: ref[1]+30 + "px",
		left: ref[0]-15 + "px"
	});

	var clazz = "number socialist labeleast";

	var span = $('<span class="' + clazz + '">' + strength + '</span>');
	span.css({
		top: ref[1]+40 + "px",
		left: ref[0]-15 + "px"
	});

	$("#board").append(img);
	$("#board").append(span);

}

View.prototype.drawAllMassProtest = function() {
	var f = Rules.massProtestMakers(this.game);
	var rank = 1;
	for (var i = 0 ;  i < f.length ; i++) {
		if (i === (R.MECKLENBURG_VORPOMMERN-50)) rank = 1;
		if (f[i] > 0) this.drawMassProtest(i, rank++, f[i]);
	}

}

View.prototype.drawMassProtest = function(index, rank, strength) {
	
	if (strength == undefined) strength = 1;
	if (rank == undefined) rank = 1;
	if (rank < 1 || rank > 6) rank = 6;

	var img = $('<img class="massprotest"/>');
	if (index < (R.MECKLENBURG_VORPOMMERN-50)) {
		img.attr('src', 'img/west_mp_' + rank + '.png');
	} else {
		img.attr('src', 'img/east_mp_' + rank + '.png');
	}

	var ref = S.massprotest[index];

	img.css({
		top: ref[1] + "px",
		left: ref[0] + "px"
	});

	$("#board").append(img);

	if (strength > 1) {
		var clazz = "number massprotest";
		if (index > (R.WEST_BERLIN - 50)) {
			clazz += " labeleast";
		} else {
			clazz += " labelwest";
		}
		var span = $('<span class="' + clazz + '">' + strength + '</span>');
		span.css({
			top: ref[1]+10 + "px",
			left: ref[0] + "px"
		});

		$("#board").append(span);
	}

}

View.prototype.drawSocialistsBox = function() {
	var g = this.game;

	$(".socialistsBox").remove();

	if (g.socialists != undefined && g.socialists > 0) {
		var img = $('<img class="socialistsBox" src="img/socialist_cube.png"/>');

		img.css({
			top: "155px",
			left: "389px"
		});

		var span = $('<span class="number socialistsBox labeleast">' + g.socialists + '</span>');
		span.css({
			top: "165px",
			left: "389px"
		});

		$("#board").append(img);
		$("#board").append(span);
	}

	var tot = 0;
	if (g.socialists != undefined && g.socialists > 0) tot += g.socialists;
	tot += _.sum(g.provinces, 'socialists');
	tot = Math.max(0,(12 - tot));

	var img2 = $('<img class="socialistsBox" src="img/socialist_cube.png"/>');

	img2.css({
		top: "135px",
		left: "27px"
	});

	var span2 = $('<span class="number socialistsBox labeleast">' + tot + '</span>');
	span2.css({
		top: "145px",
		left: "27px"
	});

	$("#board").append(img2);
	$("#board").append(span2);

}

View.prototype.drawWall = function() {
	$(".wall").remove();
	$(".wallinberlin").remove();
	var img = $('<img class="wall" />');
	var img2 = $('<img class="wallinberlin" />');
	if (this.game.wall != undefined && this.game.wall === true) {
		img.attr('src','img/wall_built_marker.png');
		img2.attr('src','img/BerlinWall.png');
	} else {
		img.attr('src','img/flight_marker.png');
		img2.attr('src','img/wallFall.png');
	}

	img.css({
		top: "141px",
		left: "90px"
	});

	img2.css({
		position: 'absolute',
		width: '40px',
		top: "26px",
		left: "650px"
	});
	$("#board").append(img2);
	$("#board").append(img);
}

View.prototype.prepareDisplayCardDetail = function(event) {
	var src = $(event.currentTarget).attr('src');
	var position = $(event.currentTarget).position();

	if ($(event.currentTarget).hasClass('card') && $(event.currentTarget).hasClass('history')) {
		position.top = position.top-190;
	}
	event.data.view.popinCardDetail(src, position);
}

View.prototype.popinCardDetail = function(src, pos) {
	$("#cardpopin").empty();
	$("#cardpopin").append('<img src="'+src+'"/>');
	$("#cardpopin").css({
		display:'inline-block',
		top:parseInt(pos.top)-60 + "px",
		left:parseInt(pos.left)-225 + "px"
	});
1
}

View.prototype.hidePopinCardDetail = function() {
	$("#cardpopin").hide();
}

View.prototype.displayCardDetail = function(type, hiddenIcons, globalPlayerRestriction, icons, removed) {
	$("#actiondetail").empty();
	var carte = R.cards[type];

	if (icons == undefined) icons = carte.icons;

	if (carte.flight != undefined) {
		var divflight = $('<div>');
		for (var i = 0 ; i < carte.flight ; i++) {
			divflight.append('<img src="img/flight.png" class="flighticon" />')
		}
		$("#actiondetail").append(divflight);
	}

	var divbody = $("<div>");
	var added = this.displayIcons(icons, false, hiddenIcons, globalPlayerRestriction);
	
	if (carte.icons != undefined && icons[0].max != undefined) {
		divbody.append('<div>Max ' + icons[0].max + ' per province</div>')
	}

	if (carte.arrows != undefined) {
		for (var i = 0 ; i < 3 ; i++) {
			if (carte.arrows[i] != 0) $("#actiondetail").append(giveArrowLine(i,carte.arrows[i], removed));
		}
	}
	return added;
}

View.prototype.displayActionLines = function(iconList) {
	$("#actiondetail").empty();

	var cpt = 0;
	_.each(iconList, function(icons) {
		var divbody = $('<div class="icon_line selectable">');
		if (icons != undefined) {
			_.each(icons, function(icone) {
				var clazz = 'informative';
				if (!isNaN(icone)) divbody.append(giveCompleteIcon(icone, undefined, undefined, undefined, clazz));
				else divbody.append(giveCompleteIcon(icone.symbol, undefined, undefined, icone.player, clazz));
			}, this);
		}
		divbody.data('rank', cpt++);
		$("#actiondetail").append(divbody);
	}, this);

	$(".icon_line .icon .restriction").remove();
}

View.prototype.displayIcons = function(icons, linear, alreadyPlayed, globalPlayerRestriction) {
	var divbody = $("<div>");
	var added = 0;
	if (icons != undefined) {
		var cpt = 0;
		_.each(icons, function(icone) {

			var clazz = '';
			if (linear === true) {
				clazz = 'informative ';
			} else {
				if (globalPlayerRestriction != undefined) {
					if (!isNaN(icone) || (icone.player != undefined && icone.player !== globalPlayerRestriction)) {
						clazz = 'informative ';
					}
				}
			}

			if (alreadyPlayed != undefined && alreadyPlayed.indexOf(cpt) > -1) {
				clazz += 'passed';
			}

			if (isNaN(icone)) {
				divbody.append(giveCompleteIcon(icone.symbol, cpt, icone.restriction, icone.player, clazz));
			} else {
				divbody.append(giveCompleteIcon(icone, cpt, undefined, undefined, clazz));
			}

			cpt++;
		}, this);
	}

	$("#actiondetail").append(divbody);

	return added;
}

View.prototype.prepareRemoveIcons = function() {
	$("#actiondetail").prepend('<p class="iconremovalwarning">Choose an icon to remove</p>');
	$(".arrow").addClass('icon');
	$("#actiondetail").addClass('removing_icon');
	$("#actiondetail").append('<button class="skip_remove_icon">Skip</button>');
}

View.prototype.afterRemoveIcons = function() {
	$('.iconremovalwarning').remove();
	$("#actiondetail").removeClass('removing_icon');
	$(".skip_remove_icon").remove();
}

View.prototype.hideCardDetail = function() {
	$("#actiondetail").empty();
	$("#actiondetail").hide();
}

function giveCompleteIcon(type,rank,restriction,player,clazz) {
	var span = $('<span class="icon"/>');
	if (clazz != undefined && clazz != '') span.addClass(clazz);

	if (type == R.SET_HAMBURG) {
		span.append('<span>Set Hamburg</span>');
	} else {
		span.append('<img src="' + giveIconImageFromType(type) + '" />');
	}

	if (player != undefined) {
		span.append('<img class="coat" src="' + giveCoatIconForCountry(player) + '" />');
	}
	if (restriction != undefined) {
		span.append('<span class="restriction">' + giveRestricitionText(restriction) + '</span>');
	} else {
		span.append('<span class="restriction"></span>');
	}

	if (R.isPrestigeIcon(type)) {
		span.addClass("prestige");
	}

	if (rank != undefined) span.data('rank', rank);
	return span;
}

function giveIconImageFromType(type) {

	switch(type) {
		case R.PLACE_UNREST_W: return 'img/unrestYellow.png';
		case R.PLACE_UNREST_E: return 'img/unrestRed.png';
		case R.REMOVE_UNREST_W: return 'img/removeYellowUnrest.png';
		case R.REMOVE_UNREST_E: return 'img/removeRedUnrest.png';
		case R.MOVE_UNREST_E: return 'img/moveUnrest.png';
		case R.BUILD_W: return 'img/buildYellow.png';
		case R.BUILD_E: return 'img/buildRed.png';
		case R.DISBAND_W: return 'img/dismantleYellow.png';
		case R.DISBAND_E: return 'img/dismantleRed.png';
		case R.REMOVE_MASS_PROTEST: return 'img/removeMassProtest.png';
		case R.PUT_LS_W: return 'img/putLSYellow.png';
		case R.PUT_LS_LIMITED_W: return 'img/putLS2Yellow.png';
		case R.PUT_LS: return 'img/lsCounter.png';
		case R.REMOVE_LS_E: return 'img/removeLsRed.png';
		case R.REMOVE_LS_W: return 'img/removeLsYellow.png';
		case R.STOP_FACTORY_E: return 'img/stopRed.png';
		case R.RUNDOWN_FACTORY_E: return 'img/rundown.png';
		case R.REPAIR_FACTORY_E: return 'img/unRundown.png';
		case R.RED_POLICE: return 'img/redPolice.png';
		case R.PINK_POLICE: return 'img/pinkPolice.png';
		case R.BUILD_BERLIN_WALL: return 'img/BerlinWall.png';
		case R.REMOVE_BERLIN_WALL: return 'img/wallFall.png';
		case R.STASI_DISBANDMENT: return 'img/stasiDisbandment.png';
		case R.GUILLAUME_AFFAIR: return 'img/guillaumeAffair.png';
		case R.PUT_LS_E: return 'img/putLSRed.png';
		case R.ADD_SOCIALISTS: return 'img/addSocialist.png';
		case R.REMOVE_SOCIALISTS: return 'img/removeSocialist.png';
		case R.ADD_SUPPLIER_MP: return 'img/west_mp_5.png';
		case R.BONUS_PRESTIGE_E:
		case R.BONUS_PRESTIGE_W: return 'img/prestige.png';
		case R.BONUS_WC_E:
		case R.BONUS_WC_W: return 'img/westernCurrency.png';
		case R.BONUS_SOCIALIST_E:
		case R.BONUS_SOCIALIST_W: return 'img/socialisme.png';
	}
}

function giveCoatIconForCountry(country) {

	switch(country) {
		case R.WEST: return 'img/brd-coat.png';
		case R.EAST: return 'img/ddr-coat.png';
	}
}

function giveRestricitionText(restriction) {

	switch(restriction) {
		case 3: return "Hamburg";
		case 66: return "CSSR";
		case 67: return "Polska";
		case 54: return "Rheinland-Pfalz";
		case 57: return "West Berlin";
		case 29: return "Rheinsberg";
		case 52: return "Nordrhein-Westfalen";
		case 60: return "East Berlin";
		case 56: return "Bayern";
		case 51: return "Niedersachsen";
		case 62: return "Sachsen";
		case 64: return "West Germany";
		default: return "  "
	}
}

function giveArrowLine(arrowtype, value, removed) {
	var div = $('<div class="arrowline" />');
	var img = $('<img class="arrowicon" />');

	var nbYellow = value < 0 ? Math.abs(value) : 0;
	var nbRed = value > 0 ? value : 0;
	var gapYellow = 2 - nbYellow;
	var gapRed = 2 - nbRed;

	if (removed != undefined && removed.length == 2) removed = removed[0];
	else removed = -1;

	var removedDisplayed = false;

	for (var i = 0 ; i < gapYellow ; i++) div.append('<span class="gap"/>');
	for (var i = 0 ; i < nbYellow ; i++) {
		var clazz = "arrow";
		if (removed == arrowtype && removedDisplayed == false) {
			clazz += " removed";
			removedDisplayed = true;
		}
		div.append('<span class="' + clazz + '" data-mod="-1" data-line="'+arrowtype+'"><img src="img/yellowArrow.png" /></span>');
	}

	if (arrowtype == 0) img.attr('src','img/prestige.png');
	else if (arrowtype == 1) img.attr('src','img/westernCurrency.png');
	else if (arrowtype == 2) img.attr('src','img/socialisme.png');
	div.append(img);

	for (var i = 0 ; i < nbRed ; i++) {
		var clazz = "arrow";
		if (removed == arrowtype && removedDisplayed == false) {
			clazz += " removed";
			removedDisplayed = true;
		}
		div.append('<span class="' + clazz + '" data-mod="1" data-line="'+arrowtype+'"><img src="img/redArrow.png" /></span>');
	}
	for (var i = 0 ; i < gapRed ; i++) div.append('<span class="gap"/>');

	return div;
}

View.prototype.showSelectProvinces = function(provinces) {
	if (provinces != undefined && provinces.length != undefined) {
		var svg = '<svg width="721" height="1080" style="top:0;left:0" class="selector_top">';
		for (var i = 0 ; i < provinces.length ; i++) {
			var span = $('<span/>');
			var pro = provinces[i];
			if (pro >= R.WEST_BERLIN*10) {
				pro = Math.floor(pro/10);
			}
			var p = pro - 50;
			var ref = p;
			if (pro == R.WEST_BERLIN) {
				if (provinces[i] > R.WEST_BERLIN*10) {
					ref = 13 + provinces[i]%10;
				}
			}
			
			svg += '<path style="fill:#ff9900;fill-opacity:0.3;stroke:#ff9900;stroke-width:5" class="selector" data-province="' + provinces[i] + '" d="' + SVG[ref]+'" />'
			
		}
		svg += '</svg>';
		$("#board").append(svg);
	}
}

View.prototype.showAvailableActions = function(displayEvent, displayUnrest) {
	if (displayEvent == undefined) displayEvent = true;
	$("#actiondetail").empty();

	var borne = displayEvent ? 4 : 3;
	var deb = displayUnrest ? 1 : 2;
	for (var i = deb ; i <= borne ; i++) {
		$("#actiondetail").append(this.giveActionButton(i));
	}

}

View.prototype.giveActionButton = function(type) {
	var div = $('<div class="actionButton" />');

	if (this.game.workflow.currentPlayer == R.WEST) div.addClass("west");
	else div.addClass("east");

	switch(type) {
		case 1: 
			div.append('<img src="img/removeUnrest.png" class="small" />');
			div.append('<span>Remove unrest</span>');
			break;
		case 2: 
			div.append('<img src="img/buildRed.png" class="east medium"/>');
			div.append('<img src="img/buildYellow.png" class="west medium"/>');
			div.append('<span>Build</span>');
			break;
		case 3: 
			div.append('<img src="img/lsCounter.png" class="medium"/>');
			div.append('<span>Improve LS</span>');
			break;
		case 4:
			div.append('<img src="img/event.png" class="big"/>');
			div.append('<span>Play event</span>');
			break;
	}
	div.data('type', type);

	return div;
}

View.prototype.showAvailableCards = function() {
	var side = this.game.workflow.currentPlayer;

	this.cardRow();
	$(".card:not(.history)").addClass('selectable');
	if (side == R.EAST) $(".card.p1").addClass('not');
	else {
		$(".card.p2").addClass('not');
		$(".card").each(function() {
			var d = $(this).data('card');
			if (d > 80) $(this).addClass('not');
		});
	}

}

View.prototype.highlightCard = function(node) {
	$(".card:not(.history)").addClass("not selectable");
	$(".card.hand").removeClass("not selectable");
	$(node).removeClass('not');
	$(node).addClass('selectable');
	$(".card.not.selectable").hide();
}

View.prototype.allowActions = function() {
	$("#actiondetail").addClass('doable');
}

View.prototype.askDrawbackForSpecialCard = function() {
    $("#actiondetail").empty();
    $("#actiondetail").append('<p>You must choose either to dicard a card or to let West draw a card in order to play the special East card. The West card will be drawn at the end of your turn, so you can still undo and restart this turn.</p>');
    var div = $('<div>');
    div.append('<button class="drawbackbutton" data-btn="0">Cancel</button> ');
    if (this.game.players[R.EAST-1].hand != undefined && this.game.players[R.EAST-1].hand.length > 0) {
        div.append('<button class="drawbackbutton" data-btn="1">Discard hand card</button> ');
    }
    div.append('<button class="drawbackbutton" data-btn="2">Allow West to draw a card</button>');
    $("#actiondetail").append(div);
}

View.prototype.displayCurrentAction = function(context) {
	$("#cardrow").empty();
	$("#cardrow").append("<h3>Current action</h3>");
	$("#cardrow").append(giveCard(context.card));
	$("#cardrow").append(this.giveActionButton(context.action));
}

View.prototype.setInstruction = function(text) {
	$("#actiondetail").html('<p>' + text + '</p>');
}

View.prototype.addInstruction = function(text) {
	$("#actiondetail").append('<p>' + text + '</p>');
}

View.prototype.prepareAskExternalFactories = function(fac) {
	if (fac != undefined && fac.length > 0) {
		$("#actiondetail").empty();
		for (var i = 0 ; i < fac.length ; i++) {
			var s1 = $("<span>").html('Set ' + N.factories[fac[i]] + ' to ');
			var v1 = R.externalFactoriesLinkedProvinces[parseInt(fac[i] - R.POLSKA_N)][0];
			var b1 = $("<button>").html(N.provinces[v1-50]).data('province',v1).data('factory',fac[i]).addClass('assign');
			var s2 = $("<span>").html(' or ');
			var v2 = R.externalFactoriesLinkedProvinces[fac[i] - R.POLSKA_N][1];
			var b2 = $("<button>").html(N.provinces[v2-50]).data('province',v2).data('factory',fac[i]).addClass('assign');
			var p = $("<p>");
			p.append(s1).append(b1).append(s2).append(b2);
			$("#actiondetail").append(p);
		}
	}
}

View.prototype.prepareGuillaumeAffairStep1 = function(hideButtonHand) {
 	$("#actiondetail").empty();
 	$("#actiondetail").append('<div><img src="' + giveIconImageFromType(R.GUILLAUME_AFFAIR) + '" /></div>');
 	var div = $("<div>");
 	if (hideButtonHand === true) {
 		div.append('<p>Your opponent\'s hand is empty</p>')
 	} else {
 		div.append('<button data-type="1" class="selectguillaumetype">Search West\'s hand</button>');
 	}
 	div.append('<button data-type="2" class="selectguillaumetype">Search the draw deck</button>');
 	$("#actiondetail").append(div);
}

View.prototype.prepareGuillaumeAffairStep2 = function(cards, hand, showDeleteButton) {
	$("#actiondetail").empty();
	var d1 = $('<div class="guillaumeotherside">');

	if (showDeleteButton === true) {
		d1.append('<p>The 2 next cards from the draw deck : </p>');
	} else {
		d1.append('<p>Your opponent\'s hand : </p>');
	}
	for (var i = 0 ; i < cards.length ; i++) {
		d1.append(giveCard(cards[i], i));
	}

	$("#actiondetail").append(d1);
	$(".guillaumeotherside img").addClass('pointer');

	var d2 = $('<div class="guillaumeownside">');
	d2.append('<p>Your hand : </p>');

	for (var i = 0 ; i < hand.length ; i++) {
		if (hand[i] != 50) d2.append(giveCard(hand[i], i));
	}

	$("#actiondetail").append(d2);
	$(".guillaumeownside img").addClass('pointer');

	var d3 = $('<div>');
	d3.append('<button style="display:none;" id="switchCards" class="guillaumeaction">Switch cards</button>');
	if (showDeleteButton === true) {
		d3.append('<button style="display:none;" id="deleteCard" class="guillaumeaction">Delete card</button>');
	}
	d3.append('<button id="doNothing" class="guillaumeaction">Do nothing</button>');

	$("#actiondetail").append(d3);

}

View.prototype.showLines = function(event) {
	var game = event.data.game
	if (game.lines != undefined) {
		var div = $('<div class="lines close">');
		var d2 = $('<div class="support close">');
		d2.append('<img src="img/pistes.jpg" class="close" />')
		
		var img = $("<img/>");
		img.attr({
			'class': 'abs marker',
			'src' : 'img/prestige_marker.png'
		});
		img.css({
			'top' : '-10px',
			'left' : (453 + game.lines[0]*65) + 'px'
		});
		d2.append(img);
		var img2 = $("<img/>");
		img2.attr({
			'class': 'abs marker',
			'src' : 'img/wc_marker.png'
		});
		img2.css({
			'top' : '80px',
			'left' : (453 + game.lines[1]*65) + 'px'
		});
		d2.append(img2);
		var img3 = $("<img/>");
		img3.attr({
			'class': 'abs marker',
			'src' : 'img/socialist_marker.png'
		});
		img3.css({
			'top' : '160px',
			'left' : (453 + game.lines[2]*65) + 'px'
		});
		d2.append(img3);

		div.append(d2);
		$('body').append(div);


		$(".close").on('click', function() { $(".lines").remove()});
	

	}
}

View.prototype.viewDiscard = function(event) {
	$("#discard").remove();

	var v = event.data.view;
	var discardBody = $('<div id="discard"><h1>Decade ' + v.game.workflow.decade + '</h1></div>');

	if (v.game != undefined && v.game.discard != undefined) {

	    if (v.game.discard != undefined && v.game.discard.length > 0) {
	        var d1 = $('<div><h2>Played cards</h2></div>');
	        _.each(v.game.discard, function(carte) {
                var d = $('<div class="discardHolder" .>');

                d.append(giveCard(carte));
                d1.append(d);
            });
            discardBody.append(d1);
	    }

		var cartes = [];
		var mul = v.game.workflow.decade - 1;
		for (var i = 1 ; i <= 20 ; i++) {
			cartes.push(i + 20*mul);
		}
		var d2 = $('<div><h2>Future cards</h2></div>');
		_.each(cartes, function(carte) {
			if ((v.game.discard == undefined || v.game.discard.indexOf(carte) ==  -1) && (v.game.cardRow == undefined || v.game.cardRow.indexOf(carte) ==  -1)) {
                var d = $('<div class="discardHolder" .>');
			    d.append(giveCard(carte));
			    d2.append(d);
			}
		});
		discardBody.append(d2);
	}

	var table = '<div><table class="indicators"><thead><tr><th rowspan="2">Decade</th><th colspan="2"><img src="img/prestige.png" /></th><th colspan="2"><img src="img/westernCurrency.png" /></th><th colspan="2"><img src="img/socialisme.png" /></th></tr><tr><th><img class="info_arrow" src="img/yellowArrow.png" /></th><th><img class="info_arrow" src="img/redArrow.png" /></th><th><img class="info_arrow" src="img/yellowArrow.png" /></th><th><img class="info_arrow" src="img/redArrow.png" /></th><th><img class="info_arrow" src="img/yellowArrow.png" /></th><th><img class="info_arrow" src="img/redArrow.png" /></th></tr></thead><tbody><tr><td>I</td><td>6</td><td>5</td><td>2</td><td>2</td><td>2</td><td>7</td></tr><tr><td>II</td><td>5</td><td>6</td><td>2</td><td>6</td><td>4</td><td>3</td></tr><tr><td>III</td><td>6</td><td>6</td><td>3</td><td>5</td><td>6</td><td>5</td></tr><tr><td>IV</td><td>3</td><td>2</td><td>5</td><td>2</td><td>8</td><td>1</td></tr></tbody></table></div>';

	discardBody.append(table);

	discardBody.append('<div><button class="closediscard">Close</button></div>');
	$('body').prepend(discardBody);

	$('.closediscard').on('click', v.closeDiscard);
	v.startTriggers();
}

View.prototype.closeDiscard = function() {
	$("#discard").remove();
}

View.prototype.fullHistory = function(event) {
	Log.refreshHistory(event.data.view.game, -1);
	event.data.view.startTriggers();
}

View.prototype.startTriggers = function() {
	$('.card').off('mouseover').on('mouseover', {view:this}, this.prepareDisplayCardDetail);
	$('.card').off('mouseout').on('mouseout', this.hidePopinCardDetail);
	$("#linesmagnifier").off().on('click', {game: this.game}, this.showLines);
}

View.prototype.prepareBug = function(e) {
	$("#bugEntry").toggle();

	if ($("#bugEntry").css('display') !== 'none') {
		$("#bugEntry button").off().on('click', {view: event.data.view}, event.data.view.forkGame);
	}
}

View.prototype.forkGame = function(e) {
	var desc = $("#bugDescription").val();
	if (desc == undefined || desc == "") {
		alert('Please enter a description');
	} else {
		IO.bugEntry(e.data.view.game, desc);
		$("#bugDescription").val("");
		$("#bugEntry").hide();
	}
}

View.prototype.credits = function(e) {
	$("#credits").show();
}

View.prototype.toggleChat = function(event) {
	var v = event.data.view;
	if ($("#chat").css('display') !== 'none') {
		$("#chat").css('display','none');
		$(".chatbutton span").css('color', 'inherit');
	} else {
		$("#chat").css('display','block');
		if (v.pov == R.EAST || v.pov == R.WEST) {
			v.game.players[v.pov-1].checked = new Date().getTime();
		}
	}
}
View.prototype.refreshChat = function(messages) {
	$("#messageList").empty();

	_.each(messages, function(message) {
		addMessageToDisplay(message);
	});

	if (this.pov == R.EAST || this.pov == R.WEST) {

		var max = -1;
		if (this.game.players[this.pov-1].checked != undefined) {
			max = this.game.players[this.pov-1].checked;
		}
		var init = max;
		$(".chatentry").each(function () {
			var m = $(this).data('ts');
			if (m > max) max = m;
		});

		if (max > init) {
			$(".chatbutton span").css('color', '#FF9900');
		}

	}
}

function addMessageToDisplay(message, pre) {
	var div = $('<div class="chatentry" >');
	div.append('<span class="date">' + formatdate(message.timestamp) + ' </span>');
	div.append('<span class="bold">' + message.nom + ' : </span>');
	div.append('<span>' +message.message.replace(/\n/g, "<br/>")+ '</span>');
	if (message.date != undefined) div.data('ts', message.timestamp);
	else div.data('ts', -1);
	if (pre === true) $("#messageList").prepend(div);
	else $("#messageList").append(div);

	/*var oH = $("#chat")[0].offsetHeight;
	var sH = $("#chat")[0].scrollHeight;

	if (sH > oH) {
		$("#toggleChatButton").show();
	} else {
		$("#toggleChatButton").hide();
	}*/

}

function formatdate(ts) {
	var res = "";

	if (ts == undefined) return res;

	var d = new Date(ts);
	res += d.getFullYear() + "/";
	if (d.getMonth() < 9) {
		res += "0" + (d.getMonth() + 1);
	} else {
		res += (d.getMonth() + 1);
	}
	res += "/";
	if (d.getDate() < 10) {
		res += "0" + d.getDate();
	} else {
		res += d.getDate();
	}

	res += " ";
	if (d.getHours() < 10) {
		res += "0" + d.getHours();
	} else {
		res += d.getHours();
	}
	res += ":";
	if (d.getMinutes() < 10) {
		res += "0" + d.getMinutes();
	} else {
		res += d.getMinutes();
	}
	res += ":";
	if (d.getSeconds() < 10) {
		res += "0" + d.getSeconds();
	} else {
		res += d.getSeconds();
	}

	return res;
}

function addMessageToDisplayLive(data) {
	var m = data.val();
	if (firstTimeChat === true) {
		firstTimeChat = false;
	} else {
		if (m != undefined) addMessageToDisplay({message: m.m, nom: m.p, timestamp: m.t}, true);
	}
}

function addMessage() {
	if ($("#chatMessage").val() != "") {
		IO.postMessage($("#chatMessage").val(), global.name);
		$("#chatMessage").val("");
	}
}

function viewFullChat() {
	if ($("#chat").hasClass("unleashed")) {
		$("#chat").removeClass("unleashed");
	} else  {
		$("#chat").addClass("unleashed");
	}
}

